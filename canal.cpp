// Class automatically generated by Dev-C++ New Class wizard

#include "canal.h" // class's header file
int isec_acople;

 
// class destructor
Canal::~Canal()
{
	// insert your code here
}


// sets the value of nv_div
void Canal::Setnv_div(int x)
{
	nv_div = x;
}


// sets the value of npos_y
void Canal::Setnpos_y(int x)
{
	npos_y = x;
}


// sets the value of bgnd
void Canal::Setbgnd(bool x)
{
	bgnd = x;
}


// sets the value of bac
void Canal::Setbac(bool x)
{
	bac = x;
}


// sets the value of bdc
void Canal::Setbdc(bool x)
{
	bdc = x;
}

/*
 * Método para realizar la gráfica de la señal adquirida por
 * el canal del osciloscopio
 */
void Canal::draw(){ }

/*
 * Método para calcular el valor pico a pico de la señal
 * adquirida por el canal del osciloscopio
 */
float Canal::vpp()
{
      int icont;
      int imayor = 0;         // Inicializar el valor mayor
      int imenor = 500;       // Inicializar el valor menor
      
      for (icont=0; icont<inum_datos; icont++){
          if (idatos[icont]>imayor){
              imayor = idatos[icont];               
          }
          if (idatos[icont]< imenor){
             imenor = idatos[icont];
          }                                
      }  
      dvolt_pp = imayor - imenor; 
      return dvolt_pp;                  
}

/*
 * Método para calcular la frecuencia de la señal (periodica) 
 * adquirida por el canal del osciloscopio
 */
float Canal::frecuencia()
{
	/* TODO (#1#): Implement Canal::frecuencia() */
}

/**
 * Este método es el callback del boton selector de acople
 * del canal del osciloscopio debe ir acompañada de una función 
 * inline para poder realizar los callbacks. 
*/
void Canal::cb_acople(Fl_Widget* pboton, void *pany)
{
     Canal* pcanal=(Canal*)pany;       
     pcanal->cb_acople_in();
}

/**
 * Esta función acompaña la función  cb_acople  
 * para realizar los llamados de callback del selector de acople
 * del canal en el osciloscopio 
*/
void Canal::cb_acople_in(){
  if (isec_acople==0){
     oacop_gnd->value(0);
     oacop_ac->value(1);
     }
     if (isec_acople==1){
     oacop_ac->value(0);
     oacop_dc->value(1);
     }
     if (isec_acople==2){
     oacop_dc->value(0);
     oacop_gnd->value(1);
     isec_acople=-1;
     }
     isec_acople++;  
}

/**
 * Este método es el callback del selector de la escala de volt/div
 * del canal del osciloscopio debe ir acompañada de una función 
 * inline para poder realizar los callbacks. 
*/
void Canal::cb_volt_div(Fl_Widget* psel, void *pany)
{
     Fl_Knob *pselector = (Fl_Knob *)psel;
     Canal* pcanal=(Canal*)pany;           
     pcanal->cb_volt_div_in(pselector);
}

/**
 * Esta función acompaña la función  cb_volt_div  
 * para realizar los llamados de callback del selector de la escala
 * de volt/div del canal en el osciloscopio 
*/
void Canal::cb_volt_div_in(Fl_Widget* psel){
     Fl_Knob *pselector = (Fl_Knob *)psel;
     pselector->value(floor(pselector->value()));
     omenu_v_div->value(pselector->value());
     Setnv_div(int((pselector->value())*0.5));
}

/**
 * Este método es el callback del selector de posición de la señal
 * del canal del osciloscopio debe ir acompañada de una función 
 * inline para poder realizar los callbacks. 
*/
void Canal::cb_posx(Fl_Widget* psel, void *pany)
{
     Fl_Knob *pselector = (Fl_Knob *)psel;
     Canal* pcanal=(Canal*)pany;       
     pcanal->cb_posx_in(pselector);
}

/**
 * Esta función acompaña la función  cb_posx  
 * para realizar los llamados de callback del selector de posicion
 * de la señal del canal en el osciloscopio 
*/
void Canal::cb_posx_in(Fl_Widget* psel){
     Fl_Knob *pselector = (Fl_Knob *)psel;
     ov_posy->value(pselector->value());
     Setnpos_y(10000*(pselector->value()));
}




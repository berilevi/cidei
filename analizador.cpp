// Class automatically generated by Dev-C++ New Class wizard

#include "analizador.h" // class's header file

// class constructor
Analizador::Analizador() {                 
    
    oana_on = new Fl_Light_Button(500,655,30,20,"ON");
    oana_on->labelsize(9);
    
    ogroup_ana = new Fl_Group(5,370,530,309,"");
    ogroup_ana->box(FL_ENGRAVED_FRAME);
    ogroup_ana->deactivate();  
   
    apantalla_ch1 = new Fl_Scope(8,373,380,32,"");  // Instancia de canal 1
    apantalla_ch2 = new Fl_Scope(8,407,380,30,"");  // Instancia de canal 2
    apantalla_ch3 = new Fl_Scope(8,439,380,30,"");  // Instancia de canal 3
    apantalla_ch4 = new Fl_Scope(8,471,380,30,"");  // Instancia de canal 4
    apantalla_ch5 = new Fl_Scope(8,503,380,30,"");  // Instancia de canal 5
    apantalla_ch6 = new Fl_Scope(8,535,380,30,"");  // Instancia de canal 6
    apantalla_ch7 = new Fl_Scope(8,567,380,30,"");  // Instancia de canal 7
    apantalla_ch8 = new Fl_Scope(8,599,380,30,"");  // Instancia de canal 8
    
    olog_ana = new Fl_Button(15,635,40,18,"Log");
    olog_ana->labelsize(10);
    
    ohelp_ana = new Fl_Button(15,656,40,18,"Help");
    ohelp_ana->labelsize(10);
    
    apantalla_ch1->TraceColour(FL_RED);
    apantalla_ch1->tracetype(FL_SCOPE_TRACE_LOOP);
    apantalla_ch1->redrawmode(FL_SCOPE_REDRAW_ALWAYS);
    apantalla_ch1->linetype(FL_SCOPE_LINE);
    apantalla_ch2->TraceColour(FL_RED);
    apantalla_ch2->tracetype(FL_SCOPE_TRACE_LOOP);
    apantalla_ch2->redrawmode(FL_SCOPE_REDRAW_ALWAYS);
    apantalla_ch2->linetype(FL_SCOPE_LINE);
    apantalla_ch3->TraceColour(FL_RED);
    apantalla_ch3->tracetype(FL_SCOPE_TRACE_LOOP);
    apantalla_ch3->redrawmode(FL_SCOPE_REDRAW_ALWAYS);
    apantalla_ch3->linetype(FL_SCOPE_LINE);
    apantalla_ch4->TraceColour(FL_RED);
    apantalla_ch4->tracetype(FL_SCOPE_TRACE_LOOP);
    apantalla_ch4->redrawmode(FL_SCOPE_REDRAW_ALWAYS);
    apantalla_ch4->linetype(FL_SCOPE_LINE);
    apantalla_ch5->TraceColour(FL_RED);
    apantalla_ch5->tracetype(FL_SCOPE_TRACE_LOOP);
    apantalla_ch5->redrawmode(FL_SCOPE_REDRAW_ALWAYS);
    apantalla_ch5->linetype(FL_SCOPE_LINE);
    apantalla_ch6->TraceColour(FL_RED);
    apantalla_ch6->tracetype(FL_SCOPE_TRACE_LOOP);
    apantalla_ch6->redrawmode(FL_SCOPE_REDRAW_ALWAYS);
    apantalla_ch6->linetype(FL_SCOPE_LINE);
    apantalla_ch7->TraceColour(FL_RED);
    apantalla_ch7->tracetype(FL_SCOPE_TRACE_LOOP);
    apantalla_ch7->redrawmode(FL_SCOPE_REDRAW_ALWAYS);
    apantalla_ch7->linetype(FL_SCOPE_LINE);
    apantalla_ch8->TraceColour(FL_RED);
    apantalla_ch8->tracetype(FL_SCOPE_TRACE_LOOP);
    apantalla_ch8->redrawmode(FL_SCOPE_REDRAW_ALWAYS);
    apantalla_ch8->linetype(FL_SCOPE_LINE);
            
    ogroup_ana_botones = new Fl_Group(415,390,90,140,"");  // Agrupa los elementos del analizador
    ogroup_ana_botones->box(FL_ENGRAVED_FRAME); 
    ogroup_ana_botones->deactivate();
    
    otiempo_muestreo = new Fl_Knob(425,400,70,70,"TIMER (MS)");
    otiempo_muestreo->color(147);
    otiempo_muestreo->type(8);
    otiempo_muestreo->labelsize(9);
    otiempo_muestreo->scaleticks(10);
    otiempo_muestreo->range(0,100);
    
    caja = new Fl_Box(425,590,50,50,"");
    caja->box(FL_ENGRAVED_FRAME);
    
    //fl_register_images();
    //Fl_JPEG_Image jpg("continuidad.jpg");
    //caja->image(jpg);
    
    ogroup_ana->end();
    oana_on->callback(cb_ana_on, this);
}

// class destructor
Analizador::~Analizador() {

}
/**
 * Este callback es llamado cuando se inicializa el analizador
 * logico.
*/
void Analizador::cb_ana_on(Fl_Widget* pboton, void *pany) {
     Analizador* pana=(Analizador*)pany;
     pana->cb_ana_on_in();
}

/**
 * Esta es la funcion inline que es llamada desde el callback
 * cb_ana_on.
*/
void Analizador::cb_ana_on_in() {
      if(oana_on->value()== 1) {
        activar(1);
        Encapsular('C','a','1','0',0x00,0x00);
        Transmision();
        if (bhardware){
           ogroup_ana->activate();
           ogroup_ana_botones->activate();
           Fl::add_timeout(0.5, cb_timer_ana, this);
        }
        else {
             fl_message("Error de hardware");
        }
     }
     if(oana_on->value()== 0) {
        Fl::remove_timeout(cb_timer_ana, this);
        activar(0);
        ogroup_ana->deactivate();
        ogroup_ana_botones->deactivate(); 
     }
}

/**
 * Este método es el callback del timer para realizar la solicitud 
 * de datos del analizador al hardware.  
*/
void Analizador::cb_timer_ana(void *pany) {
     Analizador* pana=(Analizador*)pany;
     pana->cb_timer_ana_in();
}

/**
 * Esta función acompaña la función cb_timer_ana
 * para realizar los llamados de callback del timer 
*/
void Analizador::cb_timer_ana_in() {
     Encapsular('C','p','1','0',0x00,0x00);
     Transmision();
     separar_canales();
     Fl::repeat_timeout(1, cb_timer_ana, this);
}


/**
 * Esta funcion separa los datos enviados desde el hardware para cada
 * canal del analizador logico.
*/
void Analizador::separar_canales() {
     int ilong;
     int ipos_msb;
     int ipos_lsb;
     if (buf_analizador[0] > 64){
        ipos_msb = int(buf_analizador[0]-55);
     }
     else{
         ipos_msb = int(buf_analizador[0]-48); 
     }
     if (buf_analizador[1] > 64){
        ipos_lsb = int(buf_analizador[1]-55);
     }
     else{
         ipos_lsb = int(buf_analizador[1]-48); 
     }
     itoa(ipos_msb,recibido_msb,2);
     ilong = strlen(recibido_msb);
     for (int i= 4; i > 0; i-- ){
         if (ilong > 0){
            recibido_msb2[i-1] = recibido_msb[ilong-1];
         }
         else {
              recibido_msb2[i-1] = '0';
         }
         ilong --;
     }
     itoa(ipos_lsb,recibido_lsb,2);
     ilong = strlen(recibido_lsb);
     for (int i= 4; i > 0; i-- ){
         if (ilong > 0){
            recibido_lsb2[i-1] = recibido_lsb[ilong-1]; 
         }
         else {
              recibido_lsb2[i-1] = '0';
         }
         ilong --;
     }
     strcat(recibido_msb2,recibido_lsb2);
     //Canal 1
     if (recibido_msb2[0]=='1'){
        for (int i=0; i<19;i++){                   
            apantalla_ch1->Add(50000);
        }
     }
     else if (recibido_msb2[0]=='0'){
          for (int i=0; i<19;i++){                   
              apantalla_ch1->Add(10000);
          }
     }
     //Canal 2
     if (recibido_msb2[1]=='1'){
        for (int i=0; i<19;i++){                   
            apantalla_ch2->Add(50000);
        }
     }
     else if (recibido_msb2[1]=='0'){
          for (int i=0; i<19;i++){                   
              apantalla_ch2->Add(10000);
          }
     }
     //Canal 3
     if (recibido_msb2[2]=='1'){
        for (int i=0; i<19;i++){                   
            apantalla_ch3->Add(50000);
        }
     }
     else if (recibido_msb2[2]=='0'){
          for (int i=0; i<19;i++){                   
              apantalla_ch3->Add(10000);
          }
     }
     //Canal 4
     if (recibido_msb2[3]=='1'){
        for (int i=0; i<19;i++){                   
            apantalla_ch4->Add(50000);
        }
     }
     else if (recibido_msb2[3]=='0'){
          for (int i=0; i<19;i++){                   
              apantalla_ch4->Add(10000);
          }
     }
     //Canal 5
     if (recibido_msb2[4]=='1'){
        for (int i=0; i<19;i++){                   
            apantalla_ch5->Add(50000);
        }
     }
     else if (recibido_msb2[4]=='0'){
          for (int i=0; i<19;i++){                   
              apantalla_ch5->Add(10000);
          }
     }
     //Canal 6
     if (recibido_msb2[5]=='1'){
        for (int i=0; i<19;i++){                   
            apantalla_ch6->Add(50000);
        }
     }
     else if (recibido_msb2[5]=='0'){
          for (int i=0; i<19;i++){                   
              apantalla_ch6->Add(10000);
          }
     }
     //Canal 7
     if (recibido_msb2[6]=='1'){
        for (int i=0; i<19;i++){                   
            apantalla_ch7->Add(50000);
        }
     }
     else if (recibido_msb2[6]=='0'){
          for (int i=0; i<19;i++){                   
              apantalla_ch7->Add(10000);
          }
     }
     //Canal 8
     if (recibido_msb2[7]=='1'){
        for (int i=0; i<19;i++){                   
            apantalla_ch8->Add(50000);
        }
     }
     else if (recibido_msb2[7]=='0'){
          for (int i=0; i<19;i++){                   
              apantalla_ch8->Add(10000);
          }
     } 
}



/**
 * Funcion para recorrer los buffers y graficar la informacion
*/
void Analizador::graficar_datos() {
/* TODO: hacer */
}

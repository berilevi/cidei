// Class automatically generated by Dev-C++ New Class wizard

#include "analizador.h" // class's header file

int isec_numdatos = 0;

Fl_Menu_Item me[] = {
  {"Red",	FL_ALT+'r'},
  {"Green",	FL_ALT+'g'},
  {"Blue",	FL_ALT+'b'},
  {"Strange",	FL_ALT+'s', 0, 0, FL_MENU_INACTIVE},
  {"&Charm",	FL_ALT+'c'},
  {"Truth",	FL_ALT+'t'},
  {"Beauty",	FL_ALT+'b'},
  {0}
};

// class constructor
Analizador::Analizador() {                 
    
    idatapos = 0;
    inum_muestras = 9;
    idatos_graficados = 40;
    pdata_analizador = new char *[inum_muestras];
    
    for (int i = 0; i< inum_muestras; i++){
        pdata_analizador[i] = new char [9];
    }
    
    ogroup_ana = new Fl_Group(5,370,505,330,"");
    ogroup_ana->box(FL_ENGRAVED_FRAME);
    ogroup_ana->box(FL_UP_BOX);
    ogroup_ana->deactivate(); 
     
    apantalla_ch1 = new Fl_Scope(12,410,400,34,"");  // Instancia de canal 1
    apantalla_ch2 = new Fl_Scope(12,442,400,34,"");  // Instancia de canal 2
    apantalla_ch3 = new Fl_Scope(12,474,400,34,"");  // Instancia de canal 3
    apantalla_ch4 = new Fl_Scope(12,506,400,34,"");  // Instancia de canal 4
    apantalla_ch5 = new Fl_Scope(12,538,400,34,"");  // Instancia de canal 5
    apantalla_ch6 = new Fl_Scope(12,570,400,34,"");  // Instancia de canal 6
    apantalla_ch7 = new Fl_Scope(12,602,400,34,"");  // Instancia de canal 7
    apantalla_ch8 = new Fl_Scope(12,634,400,34,"");  // Instancia de canal 8
    
    oscroll = new Fl_Scrollbar(8,670,410,10,"");
    oscroll->type(FL_HORIZONTAL);
    oscroll->range(0,40);
    oscroll->linesize(2);
    oscroll->step(1);
    
/*  odato1 = new Fl_Output(16,638,36,20,"");
    odato1->textsize(9);
    odato2 = new Fl_Output(54,638,36,20,"");
    odato3 = new Fl_Output(90,638,36,20,"");
    odato4 = new Fl_Output(127,638,36,20,"");
    odato5 = new Fl_Output(164,638,36,20,"");
    odato6 = new Fl_Output(201,638,36,20,"");
    odato7 = new Fl_Output(238,638,36,20,"");
    odato8 = new Fl_Output(275,638,36,20,"");
    odato9 = new Fl_Output(312,638,36,20,"");
    odato10 = new Fl_Output(349,638,36,20,"");
*/  
  
    olog_ana = new Fl_Button(290,382,40,16,"Log");
    olog_ana->labelsize(10);
    
    ohelp_ana = new Fl_Button(340,382,40,16,"Help");
    ohelp_ana->labelsize(10);
    
    oayuda_ana = new Fl_Check_Button(385,382,20,16,"?");
    oayuda_ana->labelsize(12);
    
    apantalla_ch1->TraceColour(FL_RED);
    apantalla_ch1->tracetype(FL_SCOPE_TRACE_LOOP);
    apantalla_ch1->redrawmode(FL_SCOPE_REDRAW_ALWAYS);
    apantalla_ch1->linetype(FL_SCOPE_LINE);
    apantalla_ch2->TraceColour(FL_RED);
    apantalla_ch2->tracetype(FL_SCOPE_TRACE_LOOP);
    apantalla_ch2->redrawmode(FL_SCOPE_REDRAW_ALWAYS);
    apantalla_ch2->linetype(FL_SCOPE_LINE);
    apantalla_ch3->TraceColour(FL_RED);
    apantalla_ch3->tracetype(FL_SCOPE_TRACE_LOOP);
    apantalla_ch3->redrawmode(FL_SCOPE_REDRAW_ALWAYS);
    apantalla_ch3->linetype(FL_SCOPE_LINE);
    apantalla_ch4->TraceColour(FL_RED);
    apantalla_ch4->tracetype(FL_SCOPE_TRACE_LOOP);
    apantalla_ch4->redrawmode(FL_SCOPE_REDRAW_ALWAYS);
    apantalla_ch4->linetype(FL_SCOPE_LINE);
    apantalla_ch5->TraceColour(FL_RED);
    apantalla_ch5->tracetype(FL_SCOPE_TRACE_LOOP);
    apantalla_ch5->redrawmode(FL_SCOPE_REDRAW_ALWAYS);
    apantalla_ch5->linetype(FL_SCOPE_LINE);
    apantalla_ch6->TraceColour(FL_RED);
    apantalla_ch6->tracetype(FL_SCOPE_TRACE_LOOP);
    apantalla_ch6->redrawmode(FL_SCOPE_REDRAW_ALWAYS);
    apantalla_ch6->linetype(FL_SCOPE_LINE);
    apantalla_ch7->TraceColour(FL_RED);
    apantalla_ch7->tracetype(FL_SCOPE_TRACE_LOOP);
    apantalla_ch7->redrawmode(FL_SCOPE_REDRAW_ALWAYS);
    apantalla_ch7->linetype(FL_SCOPE_LINE);
    apantalla_ch8->TraceColour(FL_RED);
    apantalla_ch8->tracetype(FL_SCOPE_TRACE_LOOP);
    apantalla_ch8->redrawmode(FL_SCOPE_REDRAW_ALWAYS);
    apantalla_ch8->linetype(FL_SCOPE_LINE);
            
    ogroup_ana_botones = new Fl_Group(415,375,90,225,"");   // Agrupa los elementos del analizador
    ogroup_ana_botones->box(FL_ENGRAVED_FRAME); 
    ogroup_ana_botones->deactivate();
    
    omuestreo = new Fl_Value_Slider(420,390,30,200,"");
    omuestreo->range(1,10);
    omuestreo->step(1);
    omuestreo->round(1); 
    
    ogroup_ana_botones->end();
    
    orep_dato = new Fl_Choice(420,670,80,20,"");
    //orep_dato->menu(me);
    orep_dato->add("Decimal");
    orep_dato->add("Binario");
    orep_dato->add("Hexadecimal");
    
    oflancosubida = new Fl_Button(420,610,20,20,"");
    oflancobajada = new Fl_Button(445,610,20,20,"");
      
    oselector = new Fl_Spinner(470,610,30,20,""); 
    oselector->range(1,8); 
          
    ogroup_ana->end();
    
    obox_nombre = new Fl_Box(12,375,223,30,"ANALIZADOR LÓGICO");
    obox_nombre->box(FL_ENGRAVED_FRAME);
    obox_nombre->labelfont(FL_HELVETICA_BOLD);
    obox_nombre->labelsize(20);
    
    oana_on = new Fl_Light_Button(240,375,38,30,"ON");
    oana_on->labelsize(9);
    
    ocursor = new Cursores(12,410,400,668);
    
    oana_on->callback(cb_ana_on, this);
    oscroll->callback(cb_mas_datos, this);
}

// class destructor
Analizador::~Analizador() {
   for(int i = 0; i < inum_muestras; i++) 
       delete[] pdata_analizador[i]; 
   delete[] pdata_analizador;                                              
}


/**
 * Este callback es llamado cuando se inicializa el analizador
 * logico.
*/
void Analizador::cb_ana_on(Fl_Widget* pboton, void *pany) {
     Analizador* pana=(Analizador*)pany;
     pana->cb_ana_on_in();
}

/**
 * Esta es la funcion inline que es llamada desde el callback
 * cb_ana_on.
*/
void Analizador::cb_ana_on_in() {
      if(oana_on->value()== 1) {
        activar(1);
        Encapsular('C','a','1','0',0x00,0x00);
        Transmision();
        if (bhardware){
           ogroup_ana->activate();
           ogroup_ana_botones->activate();
           isec_numdatos = 0;
           Fl::add_timeout(0.5, cb_timer_ana, this);
        }
        else {
             fl_message("Error de hardware");
        }
     }
     if(oana_on->value()== 0) {
        Fl::remove_timeout(cb_timer_ana, this);
        activar(0);
        ogroup_ana->deactivate();
        ogroup_ana_botones->deactivate(); 
     }
}



/**
 * 
 * 
*/
void Analizador::cb_mas_datos(Fl_Widget* pboton, void *pany) {
     Analizador* pana=(Analizador*)pany;
     pana->cb_mas_datos_in();
}

/**
 * 
 * 
*/
void Analizador::cb_mas_datos_in() {
    //idatos= 40 - oscroll->value();  
    ocursor->iposx = oscroll->value()*10;
    ocursor->redraw();  
}


/**
 * Este método es el callback del timer para realizar la solicitud 
 * de datos del analizador al hardware.  
*/
void Analizador::cb_timer_ana(void *pany) {
     Analizador* pana=(Analizador*)pany;
     pana->cb_timer_ana_in();
}

/**
 * Esta función acompaña la función cb_timer_ana
 * para realizar los llamados de callback del timer 
*/
void Analizador::cb_timer_ana_in() {
     Encapsular('C','p','1','0',0x00,0x00);
     Transmision();
     separar_canales();
     Fl::repeat_timeout(5, cb_timer_ana, this);
}


/**
 * Esta funcion separa los datos enviados desde el hardware para cada
 * canal del analizador logico.
*/
void Analizador::separar_canales() {
     int ilong;
     int ipos_msb;
     int ipos_lsb;
     char cdato_1[9];
     
     if (buf_analizador[0] > 64){
        ipos_msb = int(buf_analizador[0]-55);
     }
     else{
         ipos_msb = int(buf_analizador[0]-48); 
     }
     if (buf_analizador[1] > 64){
        ipos_lsb = int(buf_analizador[1]-55);
     }
     else{
         ipos_lsb = int(buf_analizador[1]-48); 
     }
     //itoa(atoi(buf_analizador),cdato_1,10);                  //convertir el dato a caracter para colocarlo en el cuadro de la rep del dato
     // odato1->value(cdato_1);
     itoa(ipos_msb,recibido_msb,2);
     ilong = strlen(recibido_msb);
     for (int i= 4; i > 0; i-- ){
         if (ilong > 0){
            recibido_msb2[i-1] = recibido_msb[ilong-1];
         }
         else {
              recibido_msb2[i-1] = '0';
         }
         ilong --;
     }
     itoa(ipos_lsb,recibido_lsb,2);
     ilong = strlen(recibido_lsb);
     for (int i= 4; i > 0; i-- ){
         if (ilong > 0){
            recibido_lsb2[i-1] = recibido_lsb[ilong-1]; 
         }
         else {
              recibido_lsb2[i-1] = '0';
         }
         ilong --;
     }

     cbyte_recibido[0]= recibido_msb2[0];
     cbyte_recibido[1]= recibido_msb2[1];
     cbyte_recibido[2]= recibido_msb2[2];
     cbyte_recibido[3]= recibido_msb2[3];
     cbyte_recibido[4]= recibido_lsb2[0];
     cbyte_recibido[5]= recibido_lsb2[1];
     cbyte_recibido[6]= recibido_lsb2[2];
     cbyte_recibido[7]= recibido_lsb2[3];
     
     fl_message("dato todo es %s: ",cbyte_recibido);
     
     if (idatapos > inum_muestras) {
        idatapos = 0;
    }
     
     strcat(pdata_analizador [idatapos], cbyte_recibido);
     fl_message("dato arreglo es %s en i: %d: ", pdata_analizador [idatapos], idatapos);
     idatapos++;
     graficar_datos();
     
     //Llenar los arreglos dinamicos con los datos y mandar  a la funcion recorrer datos.
     //Canal 1
  /*   if (recibido_msb2[0]=='1'){
        for (int i=0; i<idatos_graficados;i++){                   
            apantalla_ch1->Add(50000);
        }
     }
     else if (recibido_msb2[0]=='0'){
          for (int i=0; i<idatos_graficados;i++){                   
              apantalla_ch1->Add(10000);
          }
     }
     //Canal 2
     if (recibido_msb2[1]=='1'){
        for (int i=0; i<idatos_graficados;i++){                   
            apantalla_ch2->Add(50000);
        }
     }
     else if (recibido_msb2[1]=='0'){
          for (int i=0; i<idatos_graficados;i++){                   
              apantalla_ch2->Add(10000);
          }
     }
     //Canal 3
     if (recibido_msb2[2]=='1'){
        for (int i=0; i<idatos_graficados;i++){                   
            apantalla_ch3->Add(50000);
        }
     }
     else if (recibido_msb2[2]=='0'){
          for (int i=0; i<idatos_graficados;i++){                   
              apantalla_ch3->Add(10000);
          }
     }
     //Canal 4
     if (recibido_msb2[3]=='1'){
        for (int i=0; i<idatos_graficados;i++){                   
            apantalla_ch4->Add(50000);
        }
     }
     else if (recibido_msb2[3]=='0'){
          for (int i=0; i<idatos_graficados;i++){                   
              apantalla_ch4->Add(10000);
          }
     }
     //Canal 5
     if (recibido_msb2[4]=='1'){
        for (int i=0; i<idatos_graficados;i++){                   
            apantalla_ch5->Add(50000);
        }
     }
     else if (recibido_msb2[4]=='0'){
          for (int i=0; i<idatos_graficados;i++){                   
              apantalla_ch5->Add(10000);
          }
     }
     //Canal 6
     if (recibido_msb2[5]=='1'){
        for (int i=0; i<idatos_graficados;i++){                   
            apantalla_ch6->Add(50000);
        }
     }
     else if (recibido_msb2[5]=='0'){
          for (int i=0; i<idatos_graficados;i++){                   
              apantalla_ch6->Add(10000);
          }
     }
     //Canal 7
     if (recibido_msb2[6]=='1'){
        for (int i=0; i<idatos_graficados;i++){                   
            apantalla_ch7->Add(50000);
        }
     }
     else if (recibido_msb2[6]=='0'){
          for (int i=0; i<idatos_graficados;i++){                   
              apantalla_ch7->Add(10000);
          }
     }
     //Canal 8
     if (recibido_msb2[7]=='1'){
        for (int i=0; i<idatos_graficados;i++){                   
            apantalla_ch8->Add(50000);
        }
     }
     else if (recibido_msb2[7]=='0'){
          for (int i=0; i<idatos_graficados;i++){                   
              apantalla_ch8->Add(10000);
          }
     }
     ocursor->redraw();   */
}



/**
 * Funcion para recorrer los buffers y graficar la informacion
*/
void Analizador::graficar_datos() {
     
     for (int i=0; i<inum_muestras; i++){
         
         //Canal 1
         if (pdata_analizador[i][0]=='1'){
            for (int i=0; i<idatos_graficados;i++){                   
                apantalla_ch1->Add(50000);
            }
         }
         else if (pdata_analizador[i][0]=='0'){
              for (int i=0; i<idatos_graficados;i++){                   
                  apantalla_ch1->Add(10000);
              }
         }
         //Canal 2
         if (pdata_analizador[i][1]=='1'){
            for (int i=0; i<idatos_graficados;i++){                   
                apantalla_ch2->Add(50000);
            }
         }
         else if (pdata_analizador[i][1]=='0'){
              for (int i=0; i<idatos_graficados;i++){                   
                  apantalla_ch2->Add(10000);
              }
         }
         //Canal 3
         if (pdata_analizador[i][2]=='1'){
            for (int i=0; i<idatos_graficados;i++){                   
                apantalla_ch3->Add(50000);
            }
         }
         else if (pdata_analizador[i][2]=='0'){
              for (int i=0; i<idatos_graficados;i++){                   
                  apantalla_ch3->Add(10000);
              }
         }
         //Canal 4
         if (pdata_analizador[i][3]=='1'){
            for (int i=0; i<idatos_graficados;i++){                   
                apantalla_ch4->Add(50000);
            }
         }
         else if (pdata_analizador[i][3]=='0'){
              for (int i=0; i<idatos_graficados;i++){                   
                  apantalla_ch4->Add(10000);
              }
         }
         //Canal 5
         if (pdata_analizador[i][4]=='1'){
            for (int i=0; i<idatos_graficados;i++){                   
                apantalla_ch5->Add(50000);
            }
         }
         else if (pdata_analizador[i][4]=='0'){
              for (int i=0; i<idatos_graficados;i++){                   
                  apantalla_ch5->Add(10000);
              }
         }
         //Canal 6
         if (pdata_analizador[i][5]=='1'){
            for (int i=0; i<idatos_graficados;i++){                   
                apantalla_ch6->Add(50000);
            }
         }
         else if (pdata_analizador[i][5]=='0'){
              for (int i=0; i<idatos_graficados;i++){                   
                  apantalla_ch6->Add(10000);
              }
         }
         //Canal 7
         if (pdata_analizador[i][6]=='1'){
            for (int i=0; i<idatos_graficados;i++){                   
                apantalla_ch7->Add(50000);
            }
         }
         else if (pdata_analizador[i][6]=='0'){
              for (int i=0; i<idatos_graficados;i++){                   
                  apantalla_ch7->Add(10000);
              }
         }
         //Canal 8
         if (pdata_analizador[i][7]=='1'){
            for (int i=0; i<idatos_graficados;i++){                   
                apantalla_ch8->Add(50000);
            }
         }
         else if (pdata_analizador[i][7]=='0'){
              for (int i=0; i<idatos_graficados;i++){                   
                  apantalla_ch8->Add(10000);
              }
         }
         ocursor->redraw();
     }

}

// Class automatically generated by Dev-C++- New Class wizard

#include "generador.h" // class's header file
#include <math.h>


int isec_escalas;
char cfrecuencia [9];

// class constructor
Generador::Generador(){

    isec_escalas = 0;
	ogroup_generador = new Fl_Group (515,370,505,330,"");
	ogroup_generador->box(FL_UP_BOX);
	ogroup_generador->deactivate();
	odisp_gen = new Fl_7Seg(520,410,320,100,""); 
    odisp_gen->box(FL_EMBOSSED_FRAME);
    odisp_gen->color(FL_BLACK);
    odisp_gen->thickness(5);
    odisp_gen->dot_len(5);
    odisp_gen->align_text(FL_ALIGN_RIGHT);
    odisp_gen->value("000.0");
    omHz = new Fl_Box(843,420,10,10,"mHz");
    omHz->labelsize(10);
    omHz->box(FL_ENGRAVED_BOX);
    omHz->align(FL_ALIGN_RIGHT);
    oHz = new Fl_Box(843,450,10,10,"Hz");
    oHz->labelsize(10);
    oHz->box(FL_ENGRAVED_BOX);
    oHz->align(FL_ALIGN_RIGHT);
    oMeHz = new Fl_Box(843,480,10,10,"MHz");
    oMeHz->labelsize(10);
    oMeHz->box(FL_ENGRAVED_BOX);
    oMeHz->align(FL_ALIGN_RIGHT);
    ohelp_gen  = new Fl_Button (825,382,40,18,"Help");
    ohelp_gen->labelsize(10);
    ogroup_senal = new Fl_Group (755,520,120,170,"");
    ogroup_senal->box(FL_ENGRAVED_BOX);
	ogroup_senal->deactivate();
    oseno = new Fl_Button(780,540,70,35,"Seno");
    oseno->labelsize(12);
    ocuadrada = new Fl_Button(780,585,70,35,"Cuadrada");
    ocuadrada->labelsize(12);
    otriangulo = new Fl_Button(780,635,70,35,"Triangulo");
    otriangulo->labelsize(12);
    ogroup_senal->end();
    
    ogroup_frecuencia = new Fl_Group (885,380,130,310,"");
    ogroup_frecuencia->box(FL_ENGRAVED_BOX);
	ogroup_frecuencia->deactivate();
    ofrec_gen = new Fl_Knob (900,440,100,100,"Frecuencia");
    ofrec_gen->color(147);
    ofrec_gen->type(8);
    ofrec_gen->scaleticks(0);
    ofrec_gen->labelsize(9);
    ofrec_gen->step(0.1);
    ofrec_gen->range(0,1);
    
    ofrec_gen2 = new Fl_Knob (915,565,70,70,"Ajuste Fino");
    ofrec_gen2->color(147);
    ofrec_gen2->type(8);
    ofrec_gen2->scaleticks(0);
    ofrec_gen2->labelsize(9);
    ofrec_gen2->step(0.1);
    ofrec_gen2->range(0,1);
    
    oescala_frecuencia = new Fl_Choice(890,410,120,20,"Rango");
    oescala_frecuencia->labelsize(13);
    oescala_frecuencia->align(FL_ALIGN_TOP);
    oescala_frecuencia->add("1 Hz",0,(Fl_Callback *)cb_frec1,this);
    oescala_frecuencia->add("100 Hz",0,(Fl_Callback *)cb_frec100,this);
    oescala_frecuencia->add("500 Hz",0,(Fl_Callback *)cb_frec500,this);
    oescala_frecuencia->add("1 KHz",0,(Fl_Callback *)cb_frec1k,this);
    oescala_frecuencia->add("100 KHz",0,(Fl_Callback *)cb_frec100k,this);
    oescala_frecuencia->add("500 KHz",0,(Fl_Callback *)cb_frec500k,this);
    oescala_frecuencia->add("1 MHz",0,(Fl_Callback *)cb_frec1m,this);
       
    ovalor_frec = new Fl_Value_Input(900,655,100,25,"");
    ovalor_frec->type(FL_FLOAT_INPUT);
    ogroup_frecuencia->end();
    ogroup_amplitud = new Fl_Group (525,520,110,170,"");
    ogroup_amplitud->box(FL_ENGRAVED_BOX);
	ogroup_amplitud->deactivate();
    oamplitud = new Fl_Knob (540,550,80,80,"Amplitud");
    oamplitud->color(180);
    oamplitud->type(8); 
    oamplitud->scaleticks(0);
    oamplitud->labelsize(11);
    oamplitud->range(0,5);
    odisp_amplitud = new Fl_Output(545,650,70,20,"");
    ogroup_amplitud->end();
    
    ogroup_offset = new Fl_Group (640,520,110,170,"");
    ogroup_offset->box(FL_ENGRAVED_BOX);
	ogroup_offset->deactivate();
    ooffset = new Fl_Knob (655,550,80,80,"Offset");
    ooffset->color(180);
    ooffset->type(8);
    ooffset->scaleticks(0); 
    ooffset->labelsize(11);
    ooffset->range(-5,5);
    odisp_offset = new Fl_Output(660,650,70,20,"");
    
    ogroup_offset->end();
    
 	ogroup_generador-> end();
	
	obox_nombre = new Fl_Box(520,375,254,30,"GENERADOR DE SEÑALES");
    obox_nombre->box(FL_ENGRAVED_FRAME);
    obox_nombre->labelfont(FL_HELVETICA_BOLD);
    obox_nombre->labelsize(19);
	
	ogen_on = new Fl_Light_Button(780,375,38,30,"ON");  
    ogen_on->labelsize(9);     
    
    ogen_on->callback(cb_generador_on, this);
    oseno->callback(cb_seno,this);
    ocuadrada->callback(cb_cuadrada,this);
    otriangulo->callback(cb_triangulo,this);
    ofrec_gen->callback(cb_frec_gen, this);
    oamplitud->callback(cb_amplitud, this);
    ooffset->callback(cb_offset, this);
    //ofrec_gen2->callback(cb_frec_gen2, this);
    //ocontador_frec->callback(cb_contador_frec, this);

}


/*
 * Este método es el callback del boton que activa el generador de señales
*/
void Generador::cb_generador_on(Fl_Widget* pboton, void *any)
{
     Generador* pgener=(Generador*)any;
     pgener->cb_generador_on_in();
}

/**
 * Esta función acompaña la función  cb_generador_on para activar el  
 * generador de señales
*/
void Generador::cb_generador_on_in(){
     if (ogen_on->value()== 1){
        activar(1);
        Encapsular('I','a','1','0',0x00,0x00);
        Transmision();
        if (bhardware){
           ogroup_generador->activate();
           ogroup_frecuencia->activate();
           ogroup_offset->activate();
           oescala_frecuencia->value(0);
           ogroup_senal->activate();
           ogroup_amplitud->activate();
           oseno->value(1);
        }
        else {
             fl_message("Error de hardware");
        }
     }
     if (ogen_on->value()== 0){
        ocuadrada->box(FL_UP_BOX);                      
        ocuadrada->value(0);
        otriangulo->box(FL_UP_BOX);                      
        otriangulo->value(0);
        activar(0);
        oseno->box(FL_UP_BOX);                      
        oseno->value(0);
        ogroup_generador->deactivate(); 
     } 
}



/*
 *  Callback del boton que selecciona la señal seno
*/
void Generador::cb_seno(Fl_Widget* pboton, void *any){
     Generador* pgener=(Generador*)any;
     pgener->cb_seno_in();
}

/**
 * Callback del boton que selecciona la señal seno
*/
void Generador::cb_seno_in(){
     if (oseno->value()== 0){
        ocuadrada->box(FL_UP_BOX);                      
        ocuadrada->value(0);
        otriangulo->box(FL_UP_BOX);                      
        otriangulo->value(0);
        Encapsular('I','i','1','1',0x00,0x00);
        Transmision();
        if (bhardware){
           otriangulo->value(0);
           oseno->value(1);
           oseno->box(FL_DOWN_BOX);
        }
        else {
             fl_message("Error de hardware");
        }
     }
     else{
        oseno->box(FL_UP_BOX);                      
        oseno->value(0);
     }
}


/*
 * Callback del boton que selecciona la señal cuadrada
*/
void Generador::cb_cuadrada(Fl_Widget* pboton, void *any){
     Generador* pgener=(Generador*)any;
     pgener->cb_cuadrada_in();
}

/**
 * Callback del boton que selecciona la señal cuadrada
*/
void Generador::cb_cuadrada_in(){
     if (ocuadrada->value()== 0){
        oseno->box(FL_UP_BOX);                      
        oseno->value(0);
        otriangulo->box(FL_UP_BOX);                      
        otriangulo->value(0);
        Encapsular('I','i','1','3',0x00,0x00);
        Transmision();
        if (bhardware){                   
           ocuadrada->value(1);
           ocuadrada->box(FL_DOWN_BOX);
        }
        else {
             fl_message("Error de hardware");
        }
     }
     else{
        ocuadrada->box(FL_UP_BOX);                      
        ocuadrada->value(0); 
     }
}

/*
 * Callback del boton que selecciona la señal triangulo
*/
void Generador::cb_triangulo(Fl_Widget* pboton, void *any){
     Generador* pgener=(Generador*)any;
     pgener->cb_triangulo_in();
}

/**
 * Callback del boton que selecciona la señal triangulo
*/
void Generador::cb_triangulo_in(){
     if (otriangulo->value()== 0){
        oseno->box(FL_UP_BOX);                      
        oseno->value(0);
        ocuadrada->box(FL_UP_BOX);                      
        ocuadrada->value(0);
        Encapsular('I','i','1','2',0x00,0x00);
        Transmision();
        if (bhardware){                   
           otriangulo->value(1);
           otriangulo->box(FL_DOWN_BOX);
        }
        else {
             fl_message("Error de hardware");
        }
     }
     else{
        otriangulo->box(FL_UP_BOX);                      
        otriangulo->value(0); 
     }
}




/*
 * Este método es el callback del boton que selecciona la frecuencia de la señal 
 * que va a ser generada.
*/
void Generador::cb_frec_gen(Fl_Widget* pboton, void *any)
{
     Generador* pgener=(Generador*)any;
     pgener->cb_frec_gen_in();
}

/**
 * Esta función acompaña la función  cb_frec_gen para seleccionar la frecuencia 
 * de la señal que va a ser generada.
*/
void Generador::cb_frec_gen_in(){
     long double in = 0.18626451561698509610066226162263;         //Factor multiplicativo para la frecuencia
     int sd;
     int icont;
     int ilong;
     char pruebafrec[10];
     ovalor_frec->value(ofrec_gen->value()*5.3687);
     sd = int(in*ofrec_gen->value());
     itoa(ofrec_gen->value(),cfrecuencia,10);
     //odisp_gen->value(cfrecuencia);
     sprintf(pruebafrec, "%.6g", ofrec_gen->value());
     odisp_gen->value(pruebafrec);
     itoa(sd,frec_hexa,16);
     ilong = strlen(frec_hexa);
     for (icont = 8; icont > 0; icont --){
         if(ilong > 0){
            if (frec_hexa[ilong-1]>60){                                                        
               frec_hexa[ilong-1]=frec_hexa[ilong-1]-32;  
               trama_control[icont-1]=frec_hexa[ilong-1];                                                          
            }
            else{
                 trama_control[icont-1]= frec_hexa[ilong-1];
            }
         }
         else{
             trama_control[icont-1] = '0'; 
         }
         ilong--;
     }
     trama_control[0] = 0x05;
     trama_control[8] = 0x00;
     Transmision();
}



/*
 * Este método es el callback del boton que selecciona la amplitud de la señal 
 * que va a ser generada.
*/
void Generador::cb_amplitud(Fl_Widget* pboton, void *any){
     Generador* pgener=(Generador*)any;
     pgener->cb_amplitud_in();
}

/**
 * Esta función acompaña la función  cb_amplitud para seleccionar la amplitud 
 * de la señal que va a ser generada.
*/
void Generador::cb_amplitud_in(){
     char camplitud [10];
     sprintf(camplitud, "%.3g", oamplitud->value());
     odisp_amplitud->value(camplitud);
     int ilong;
     itoa(oamplitud->value()*51,amplitud_hexa,16);
     ilong = strlen(amplitud_hexa);
     if (amplitud_hexa[0] > 60){
           amplitud_hexa[0]= amplitud_hexa[0]-32;
     }
     if (amplitud_hexa[1] > 60){
           amplitud_hexa[1]= amplitud_hexa[1]-32;
     }
     if (ilong>1){
        trama_control[4]= amplitud_hexa[0];
        trama_control[5]= amplitud_hexa[1];
     }
     else{
        trama_control[4]= '0';
        trama_control[5]= amplitud_hexa[1];
     }
     trama_control[0]= 0x01;
     trama_control[1]= 'I';
     trama_control[2]= 'm';
     trama_control[3]= '2';
     trama_control[6]= 0x04;
     trama_control[7]= 0x06;
   //  Transmision();
  /*   if ( ~bhardware){
        fl_message("Error de hardware amp es %d", bhardware);
     }*/
}



/*
 * Este método es el callback del boton que selecciona el nivel de offset de la señal 
 * que va a ser generada.
*/
void Generador::cb_offset(Fl_Widget* pboton, void *any)
{
     Generador* pgener=(Generador*)any;
     pgener->cb_offset_in();
}

/**
 * Esta función acompaña la función  cb_offset para seleccionar el nivel de offset 
 * de la señal que va a ser generada.
*/
void Generador::cb_offset_in(){
     char coffset [10];
     sprintf(coffset, "%.2g", ooffset->value());
     odisp_offset->value(coffset);
     int ilong;                                               
     itoa(int((ooffset->value()*25.6)+128),offset_hexa,16);
     ilong = strlen(offset_hexa);
     if (offset_hexa[0] > 60){
           offset_hexa[0]= offset_hexa[0]-32;
     }
     if (offset_hexa[1] > 60){
           offset_hexa[1]= offset_hexa[1]-32;
     }
     if (ilong>1){
        trama_control[4]= offset_hexa[0];
        trama_control[5]= offset_hexa[1];
     }
     else{
        trama_control[4]= '0';
        trama_control[5]= offset_hexa[1];
     }
     trama_control[0]= 0x01;
     trama_control[1]= 'I';
     trama_control[2]= 'n';
     trama_control[3]= '2';
     trama_control[6]= 0x04;
     trama_control[7]= 0x00;
 //    Transmision();
//     if (~bhardware)
  //      fl_message("Error de hardware");
}



/**
 * Callbacks del menu de escalas de frecuencias de la señal generada    
*/

void Generador::cb_frec1(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Generador* pgener=(Generador*)pany;
     pgener->cb_frec1_in(pselector);
}

void Generador::cb_frec1_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     ofrec_gen->range(0,1);
     ofrec_gen->value(0);
     odisp_gen->value("0.0");
}

void Generador::cb_frec100(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Generador* pgener=(Generador*)pany;
     pgener->cb_frec100_in(pselector);
}

void Generador::cb_frec100_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     ofrec_gen->range(0,100);
     ofrec_gen->value(0);
     odisp_gen->value("0.0");
}


void Generador::cb_frec500(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Generador* pgener=(Generador*)pany;
     pgener->cb_frec500_in(pselector);
}

void Generador::cb_frec500_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     ofrec_gen->range(0,500);
     ofrec_gen->value(0);
     odisp_gen->value("0.0");
}


void Generador::cb_frec1k(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Generador* pgener=(Generador*)pany;
     pgener->cb_frec1k_in(pselector);
}

void Generador::cb_frec1k_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     ofrec_gen->range(0,1000);
     ofrec_gen->value(0);
     odisp_gen->value("0.0");
}

void Generador::cb_frec100k(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Generador* pgener=(Generador*)pany;
     pgener->cb_frec100k_in(pselector);
}

void Generador::cb_frec100k_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     ofrec_gen->range(0,100000);
     ofrec_gen->value(0);
     odisp_gen->value("0.0");
}

void Generador::cb_frec500k(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Generador* pgener=(Generador*)pany;
     pgener->cb_frec500k_in(pselector);
}

void Generador::cb_frec500k_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     ofrec_gen->range(0,500000);
     ofrec_gen->value(0);
     odisp_gen->value("0.0");
}

void Generador::cb_frec1m(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Generador* pgener=(Generador*)pany;
     pgener->cb_frec1m_in(pselector);
}

void Generador::cb_frec1m_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     ofrec_gen->range(0,1000000);
     ofrec_gen->value(0);
     odisp_gen->value("0.0");
}



// class destructor
Generador::~Generador(){
	// insert your code here
}

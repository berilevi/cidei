// Class automatically generated by Dev-C++ New Class wizard

#include "multimetro.h" // class's header file
#include <FL/Fl_Shared_Image.H>
#include <FL/Fl_PNG_Image.H>


/*******************************************************************************
 * Multímetro: Clase que representa las funciones del instrumento multímetro con
 *             6 tipos de medición:
 * Voltímetro AC: Mide la magnitud de voltaje True RMS de una señal alterna.
 * Voltímetro DC: Mide la magnitud de voltaje de una señal continua.
 * Amperímetro AC: Mide la magnitud de corriente de una señal alterna.
 * Amperímetro DC: Mide la magnitud de corriente de una señal continua. 
 * Resistencia: Mide la magnitud de resistencia eléctrica.
 * Continuidad: Reviza la continuidad eléctrica.             
*******************************************************************************/
Multimetro::Multimetro(){
                            
    //Fl_Tooltip::disable();
    Fl_Tooltip::enable();
    fvalorEscalado = 0.0;
    strcpy(cvalor,"0.000");                                                     //Inicialización del valor mostrado en el dsiplay
    strcpy(cnombre,"mult.txt"); 
    ogroup_mult = new Fl_Group (735,5,285,360,"");                              //Inicio del grupo de los elementos del multímetro
    ogroup_mult->box(FL_ENGRAVED_FRAME);
    ogroup_mult->box(FL_UP_BOX);
    ogroup_mult->deactivate();
    odispMult  = new Fl_7Seg (738,42,230,99);                                   //Display del multímetro
    odispMult->color(FL_BLACK);
    odispMult->thickness(5);
    odispMult->dot_len(7);
    odispMult->align_text(FL_ALIGN_RIGHT);
    odispMult->segment_gap(2);
    odispMult->value("00.0");
    ounidades = new Fl_Box (968,42,50,99,"VAC");                                //Display de las unidades de medida
    ounidades->labelsize(20);
    ounidades->labelcolor(FL_WHITE);
    ounidades->box(FL_FLAT_BOX);
    ounidades->color(FL_BLACK);
    
    ohelpMult  = new Fl_Button (935,23,40,16,"Help");                           //Botón que inicia la ventana de ayuda de uso del instrumento.
    ohelpMult->labelsize(9);
    ohelpMult->tooltip("Inicia la ayuda de usuario para el uso del multímetro");
    
    oayudaMult = new Fl_Check_Button(985,20,20,20,"");
    
    ovoltAc = new Fl_Button(762,169,80,25,"V_ac");                              //Botón que activa el instrumento voltímetro AC.   
    ovoltAc->clear();    
    ovoltAc->box(FL_UP_BOX);
    ovoltDc = new Fl_Button(912,169,80,25,"V_dc");                              //Botón que activa el instrumento voltímetro DC.
    ovoltDc->box(FL_UP_BOX);
    oampAc = new Fl_Button(762,228,80,25,"A_ac");                               //Botón que activa el instrumento Amperímetro AC.
    oampAc->box(FL_UP_BOX);
    oampDc = new Fl_Button(912,228,80,25,"A_dc");                               //Botón que activa el instrumento Amperímetro DC.
    oampDc->box(FL_UP_BOX);
    oohm = new Fl_Button(762,323,80,25,"R");                                    //Botón que activa el instrumento Ohmetro.
    oohm->box(FL_UP_BOX);
    ocontinuidad = new Fl_Button(912,323,80,25,"Cont");                         //Botón que activa el instrumento Medidor de continuidad.
    ocontinuidad->box(FL_UP_BOX);
    
    //manualMult = new Fl_Help_Dialog;
    //manualMult->load("help_multimetro.html");                                       //Ventana de ayuda de uso del multímetro
    
    ogroup_mult-> end();                                                        //Fin del grupo de elementos del multímetro
      
    omultOn = new Fl_Light_Button(942,10,33,27,"ON");                          //Botón que enciende/apaga el instrumento
    omultOn->labelsize(9); 
    
    
    
    // Callbacks de los diferentes botones del instrumento
    omultOn->callback(cbMultOn, this);
    ovoltAc->callback(cbVoltAc, this);
    ovoltDc->callback(cbVoltDc, this);
    oampAc->callback(cbAmpAc, this);
    oampDc->callback(cbAmpDc, this);
    oohm->callback(cbOhm, this);
    ocontinuidad->callback(cbCont, this);
    ohelpMult->callback(cbHelpMult,this);
    oayudaMult->callback(cbAyudaMult,this);
    
}

// class destructor
Multimetro::~Multimetro(){
}


/*******************************************************************************
 * Multimetro::cbMultOn: Callback del botón que activa/desactiva el multímetro
 * El Callaback consta de la función static e inline cbMultOn y cbMultOnIn.
 * Al encender el instrumento se inicia el instrumento voltímetro AC por defecto 
*******************************************************************************/
void Multimetro::cbMultOn(Fl_Widget* pboton, void *any){
     Multimetro* pmult=(Multimetro*)any;
     pmult->cbMultOnIn();
}

void Multimetro::cbMultOnIn(){
     if (omultOn->value()== 1){                                                //Encender Multímetro
        activar(1);
        Encapsular('K','a','1','0',0x00,0x00);                                  //Trama de inicio de multímetro
        Transmision();
        if (bhardware){
           ogroup_mult->activate();
           cbVoltAcIn();                                                     //Inicio por defecto de voltímetro AC
           ounidades->label("VAC");
           ounidades->redraw();
        }
        else {
             fl_message("Error de hardware");
             omultOn->value(0);
        }
     }
     if (omultOn->value()== 0){                                                //Apagar el Multímetro
        Fl::remove_timeout(cbTimerMult, this);
        activar(0);
        ovoltAc->box(FL_UP_BOX);
        ovoltAc->clear();
        ovoltDc->box(FL_UP_BOX);
        ovoltDc->clear();
        oampAc->box(FL_UP_BOX);
        oampAc->clear();
        oampDc->box(FL_UP_BOX);
        oampDc->clear();
        oohm->box(FL_UP_BOX);
        oohm->clear();
        ocontinuidad->box(FL_UP_BOX);
        ocontinuidad->clear(); 
        ogroup_mult->deactivate();
        Fl_Tooltip::disable(); 
     } 
}

/*******************************************************************************
* Multimetro::setDispMult: Método para colocar el valor de la medición en el 
*                            display del multímetro.
* svalor : Cadena de caracteres con el valor de la medición realizada
*******************************************************************************/
void Multimetro::setDispMult(char svalor [4]){
     odispMult->value((svalor));       
}

/*******************************************************************************
 * Multimetro::cbTimerMult: Callback del timer para realizar la solicitud 
 *                            de datos del multímetro.  
 * El Callaback consta de la función static e inline cbTimerMult y 
 * cbTimerMultIn.
 * Se envía una trama de solicitud de datos de multímetro al hardware Mu04.
 * escalarValor(x): Función que se encarga de escalar el valor de la medida en 
 *                   la escala adecuada.
 *                   El paramétro es el valor de la escala que envía el hardware.
 * setDispMult(): Se envía el dato escalado para mostrarlo en el display.
 * Se repite el timer de solicitud de datos cada medio segundo. 
*******************************************************************************/

void Multimetro::cbTimerMult(void *pany){
     Multimetro* pmult=(Multimetro*)pany;
     pmult->cbTimerMultIn();
}

void Multimetro::cbTimerMultIn(){
     Encapsular('K','p','1','0',0x00,0x00);
     Transmision();
     escalarValor(imult_escala);
     setDispMult(cvalor);
     ounidades->redraw();
     Fl::repeat_timeout(0.5, cbTimerMult, this);
}


/*******************************************************************************
 * Multimetro::configInstrumento: Envia la trama de selección de instrumento al 
 *                                 hardware para configurar el multímetro.
 * Este método es llamado en los callbacks de los botones que seleccionan cada
 * instrumento del multímetro.
 * Se envía al hardware una trama de tipo [K,q,1,X,0,0] donde X es el núemro del 
 * instrumento seleccionado:
 * X = 1: Voltímetro DC.
 * X = 2: Voltímetro AC.
 * X = 3: Amperímetro DC.
 * X = 1: Amperímetro AC.
 * X = 1: Ohmetro DC.
 * Luego de configurar el instrumento se inicia el timer de solicitud de datos.
*******************************************************************************/

void Multimetro::configInstrumento(int instrumento){
     switch (instrumento) {
            case volt_ac:
                 Encapsular('K','q','1','2',0x00,0x00);
                 Transmision();
                 if (bhardware)
                 Fl::add_timeout(0.05, cbTimerMult, this);
                 break;
            case volt_dc:
                 Encapsular('K','q','1','1',0x00,0x00);
                 Transmision();
                 if (bhardware)
                 Fl::add_timeout(0.05, cbTimerMult, this);
                 break;
            case amp_ac:
                 Encapsular('K','q','1','4',0x00,0x00);
                 Transmision();
                 if (bhardware)
                 Fl::add_timeout(0.05, cbTimerMult, this);
                 break;
            case amp_dc:
                 Encapsular('K','q','1','3',0x00,0x00);
                 Transmision();
                 if (bhardware)
                 Fl::add_timeout(0.05, cbTimerMult, this); 
                 break;
            case ohm:
                 Encapsular('K','q','1','5',0x00,0x00);
                 Transmision();
                 if (bhardware)
                 Fl::add_timeout(0.05, cbTimerMult, this); 
                 break;
    }
}


/*******************************************************************************
 * Multimetro::escalarValor: Calcula el valor de la medición en el rango de 
 *                            escala en que se encuentre.
 * escala: Dato de escala enviada desde el hardware en la que se encuentra el
 *         valor de la medición.
 * Para calcular el resultado de la medición se realiza la siguiente formula:
 * (valor_medición-256)*Factor.
 * Por cada escala hay un Factor por el que se debe multiplicar para obtener el 
 * valor de la medición.  
*******************************************************************************/
void Multimetro::escalarValor(int escala){
     ivalorConversion = atoi(buf_mult);
     switch (escala) {
            case 1:
                 if (instrument==volt_ac){
                    fvalorEscalado = (ivalorConversion-256)*0.78;
                 }
                 else if (instrument==volt_dc){
                    fvalorEscalado = (ivalorConversion-256)*0.78;
                 }
                 else if (instrument==amp_ac){
                    fvalorEscalado = (ivalorConversion-256)*0.78;
                 }
                 else if (instrument==amp_dc){
                    fvalorEscalado = (ivalorConversion-256)*0.78;
                 }
                 else if (instrument==ohm){
                    fvalorEscalado = (ivalorConversion-256)*0.08;
                 }
                 else if (instrument==continuidad){
                    fvalorEscalado = (ivalorConversion-256)*0.078;
                    /*if (fvalorEscalado < 1)
                       Beep(1000,1000);*/
                 }
                 break; 
            case 2:
                 if (instrument==volt_ac){
                    fvalorEscalado = (ivalorConversion-256)*0.01;
                 }
                 else if (instrument==volt_dc){
                    fvalorEscalado = (ivalorConversion-256)*0.01;
                 }
                 else if (instrument==amp_ac){
                    fvalorEscalado = (ivalorConversion-256)*0.01;
                 }
                 else if (instrument==amp_dc){
                    fvalorEscalado = (ivalorConversion-256)*0.01;
                 }
                 else if (instrument==ohm){
                    fvalorEscalado = (ivalorConversion-256)*0.78;
                 }
                 break;
            case 3:
                 if (instrument==volt_ac){
                    fvalorEscalado = (ivalorConversion-256)*0.08;
                 }
                 else if (instrument==volt_dc){
                    fvalorEscalado = (ivalorConversion-256)*0.08;
                 }
                 else if (instrument==amp_ac){
                    fvalorEscalado = (ivalorConversion-256)*0.08;
                 }
                 else if (instrument==amp_dc){
                    fvalorEscalado = (ivalorConversion-256)*0.08;
                 }
                 else if (instrument==ohm){
                    fvalorEscalado = (ivalorConversion-256)*7.81;
                 }
                 break;
            case 4:
                 if (instrument==volt_ac){
                    fvalorEscalado = (ivalorConversion-256)*0.78;
                 }
                 else if (instrument==volt_dc){
                    fvalorEscalado = (ivalorConversion-256)*0.78;
                 }
                 else if (instrument==amp_ac){
                    fvalorEscalado = (ivalorConversion-256)*0.78;
                 }
                 else if (instrument==amp_dc){
                    fvalorEscalado = (ivalorConversion-256)*0.78;
                 }
                 else if (instrument==ohm){
                    fvalorEscalado = (ivalorConversion-256)*7812.5;
                 }
                 break;
            case 5:
                 if (instrument==volt_dc){
                    fvalorEscalado = (ivalorConversion-256)*7.81;
                 }
                 else if (instrument==amp_dc){
                    fvalorEscalado = (ivalorConversion-256)*0.08;
                 }
                 break;
            case 6:
                 if (instrument==volt_dc){
                    fvalorEscalado = (ivalorConversion-256)*0.78;
                 }
                 else if (instrument==amp_dc){
                    fvalorEscalado = (ivalorConversion-256)*0.78;
                 }
                 break;
            case 7:
                 if (instrument==volt_dc){
                    fvalorEscalado = (ivalorConversion-256)*0.01;
                 }
                 else if (instrument==amp_dc){
                    fvalorEscalado = (ivalorConversion-256)*0.01;
                 }
                 break;
            case 8:
                 if (instrument==volt_dc){
                    fvalorEscalado = (ivalorConversion-256)*0.08;
                 }
                 else if (instrument==amp_dc){
                    fvalorEscalado = (ivalorConversion-256)*0.08;
                 }
                 break;
            case 9:
                 if (instrument==volt_dc){
                    fvalorEscalado = (ivalorConversion-256)*0.78;
                 }
                 else if (instrument==amp_dc){
                    fvalorEscalado = (ivalorConversion-256)*0.78;
                 }
                 break; 
     }
     sprintf(cvalor,"%.3g",fvalorEscalado);
}


/*******************************************************************************
 * Multimetro::cbVoltAc: Callback del botón que activa el medidor de voltaje 
 *                         en AC.
 * El Callaback consta de la función static e inline cbVoltAc y cbVoltAcIn.
 * Los botones de selección de instrumento son excluyentes, es decir que cuando
 * se activa uno, los demas se desactivan.
 * Se realiza un llamado al método configInstrumento(), con el parametro
 * volt_ac.
*******************************************************************************/
void Multimetro::cbVoltAc(Fl_Widget* pboton, void *any){
     Multimetro* pmult=(Multimetro*)any;
     pmult->cbVoltAcIn();
}

void Multimetro::cbVoltAcIn(){
     if (ovoltAc->value()== 0){
        Fl::remove_timeout(cbTimerMult, this);
        ovoltDc->box(FL_UP_BOX);
        ovoltDc->clear();
        oampAc->box(FL_UP_BOX);
        oampAc->clear();
        oampDc->box(FL_UP_BOX);
        oampDc->clear();
        oohm->box(FL_UP_BOX);
        oohm->clear();
        ocontinuidad->box(FL_UP_BOX);
        ocontinuidad->clear();        
        ovoltAc->box(FL_DOWN_BOX);
        ovoltAc->set();
        instrument = volt_ac;
        ounidades->label("VAC");
        configInstrumento(volt_ac);
     }
     else{
          ovoltAc->box(FL_UP_BOX);
          ovoltAc->clear();
     }
}


/*******************************************************************************
 * Multimetro::cbVoltDc: Callback del botón que activa el medidor de voltaje 
 *                         en DC.
 * El Callaback consta de la función static e inline cbVoltDc y cbVoltDcIn.
 * Los botones de selección de instrumento son excluyentes, es decir que cuando
 * se activa uno, los demas se desactivan.
 * Se realiza un llamado al método configInstrumento(), con el parametro
 * volt_dc.
*******************************************************************************/

void Multimetro::cbVoltDc(Fl_Widget* pboton, void *any){
     Multimetro* pmult=(Multimetro*)any;
     pmult->cbVoltDcIn();
}

void Multimetro::cbVoltDcIn(){
     if (ovoltDc->value()== 0){
        Fl::remove_timeout(cbTimerMult, this);
        ovoltAc->box(FL_UP_BOX);
        ovoltAc->clear();
        oampAc->box(FL_UP_BOX);
        oampAc->clear();
        oampDc->box(FL_UP_BOX);
        oampDc->clear();
        oohm->box(FL_UP_BOX);
        oohm->clear();
        ocontinuidad->box(FL_UP_BOX);
        ocontinuidad->clear();                     
        ovoltDc->box(FL_DOWN_BOX);
        ovoltDc->set();
        instrument = volt_dc;
        ounidades->label("VDC");
        configInstrumento(volt_dc);
     }
     else{
          ovoltDc->box(FL_UP_BOX);
          ovoltDc->clear();
     }
}


/*******************************************************************************
 * Multimetro::cbAmpAc: Callback del botón que activa el medidor de corriente 
 *                         en AC.
 * El Callaback consta de la función static e inline cbAmpAc y cbAmpAcIn.
 * Los botones de selección de instrumento son excluyentes, es decir que cuando
 * se activa uno, los demas se desactivan.
 * Se realiza un llamado al método configInstrumento(), con el parametro
 * amp_ac.
*******************************************************************************/

void Multimetro::cbAmpAc(Fl_Widget* pboton, void *any){
     Multimetro* pmult=(Multimetro*)any;
     pmult->cbAmpAcIn();
}

void Multimetro::cbAmpAcIn(){
    if (oampAc->value()== 0){
        Fl::remove_timeout(cbTimerMult, this);
        //fl_alert("Verifique las puntas de prueba");
        ovoltAc->box(FL_UP_BOX);
        ovoltAc->clear();
        ovoltDc->box(FL_UP_BOX);
        ovoltDc->clear();
        oampDc->box(FL_UP_BOX);
        oampDc->clear();
        oohm->box(FL_UP_BOX);
        oohm->clear();
        ocontinuidad->box(FL_UP_BOX);
        ocontinuidad->clear();                     
        oampAc->box(FL_DOWN_BOX);
        oampAc->set();
        instrument = amp_ac;
        ounidades->label("AAC");
        configInstrumento(amp_ac);
     }
     else{
          oampAc->box(FL_UP_BOX);
          oampAc->clear();
     } 
}


/*******************************************************************************
 * Multimetro::cbAmpDc: Callback del botón que activa el medidor de corriente 
 *                         en DC.
 * El Callaback consta de la función static e inline cbAmpDc y cbAmpDcIn.
 * Los botones de selección de instrumento son excluyentes, es decir que cuando
 * se activa uno, los demas se desactivan.
 * Se realiza un llamado al método configInstrumento(), con el parametro
 * amp_dc.
*******************************************************************************/

void Multimetro::cbAmpDc(Fl_Widget* pboton, void *any){
     Multimetro* pmult=(Multimetro*)any;
     pmult->cbAmpDcIn();
}

void Multimetro::cbAmpDcIn(){
    if (oampDc->value()== 0){
        Fl::remove_timeout(cbTimerMult, this);
        fl_alert("Verifique las puntas de prueba");
        ovoltAc->box(FL_UP_BOX);
        ovoltAc->clear();
        ovoltDc->box(FL_UP_BOX);
        ovoltDc->clear();
        oampAc->box(FL_UP_BOX);
        oampAc->clear();
        oohm->box(FL_UP_BOX);
        oohm->clear();
        ocontinuidad->box(FL_UP_BOX);
        ocontinuidad->clear();                     
        oampDc->box(FL_DOWN_BOX);
        oampDc->set();
        instrument = amp_dc;
        ounidades->label("ADC");
        configInstrumento(amp_dc);
     }
     else{
          oampDc->box(FL_UP_BOX);
          oampDc->clear();
     } 
}


/*******************************************************************************
 * Multimetro::cbOhm: Callback del botón que activa el medidor de resistencia 
 *  
 * El Callaback consta de la función static e inline cbOhm y cbOhmIn.
 * Los botones de selección de instrumento son excluyentes, es decir que cuando
 * se activa uno, los demas se desactivan.
 * Se realiza un llamado al método configInstrumento(), con el parametro
 * ohm.
*******************************************************************************/

void Multimetro::cbOhm(Fl_Widget* pboton, void *any){
     Multimetro* pmult=(Multimetro*)any;
     pmult->cbOhmIn();
}

void Multimetro::cbOhmIn(){
     if (oohm->value()== 0){
        Fl::remove_timeout(cbTimerMult, this);
        ovoltAc->box(FL_UP_BOX);
        ovoltAc->clear();
        ovoltDc->box(FL_UP_BOX);
        ovoltDc->clear();
        oampDc->box(FL_UP_BOX);
        oampDc->clear();
        oampAc->box(FL_UP_BOX);
        oampAc->clear();
        ocontinuidad->box(FL_UP_BOX);
        ocontinuidad->clear();                     
        oohm->box(FL_DOWN_BOX);
        oohm->set();
        instrument = ohm;
        ounidades->label("R");
        configInstrumento(ohm);
     }
     else{
          oohm->box(FL_UP_BOX);
          oohm->clear();
     }
}


/*******************************************************************************
 * Multimetro::cbCont: Callback del botón que activa el medidor de continuidad 
 *  
 * El Callaback consta de la función static e inline cbCont y cbContIn.
 * Los botones de selección de instrumento son excluyentes, es decir que cuando
 * se activa uno, los demas se desactivan.
 * Se realiza un llamado al método configInstrumento(), con el parametro
 * ohm.
 * La medición de continuidad se realiza con el ohmetro y se verifica si el 
 * valor de resistencia es menor que un (1) Ohmio entonces se activa un sonido 
 * indicador de continuidad.
*******************************************************************************/

void Multimetro::cbCont(Fl_Widget* pboton, void *any){
     Multimetro* pmult=(Multimetro*)any;
     pmult->cbContIn();
}

void Multimetro::cbContIn(){
     if (ocontinuidad->value()== 0){
        Fl::remove_timeout(cbTimerMult, this);
        ovoltAc->box(FL_UP_BOX);
        ovoltAc->clear();
        ovoltDc->box(FL_UP_BOX);
        ovoltDc->clear();
        oampDc->box(FL_UP_BOX);
        oampDc->clear();
        oampAc->box(FL_UP_BOX);
        oampAc->clear();
        oohm->box(FL_UP_BOX);
        oohm->clear();                     
        ocontinuidad->box(FL_DOWN_BOX);
        ocontinuidad->set();
        instrument = continuidad;
        ounidades->label("Cont");
        configInstrumento(ohm);
       // Beep(1000,1000);
     }
     else{
          ocontinuidad->box(FL_UP_BOX);
          ocontinuidad->clear();
     }
}


/*******************************************************************************
 * Multimetro::cbHelpMult: Callback del botón que lanza la ayuda del uso del
 *                      instrumento. 
 * El Callaback consta de la función static e inline cbHelpMult y cbHelpMultIn.
 * Se despliega una ventana de ayuda con un archivo en html con la guía de
 * usuario del instrumento.
*******************************************************************************/

void Multimetro::cbHelpMult(Fl_Widget* pboton, void *any){
     Multimetro* pmult=(Multimetro*)any;
     pmult->cbHelpMultIn();
}

void Multimetro::cbHelpMultIn(){
      //manualMult->show();
}


/*******************************************************************************
 * Multimetro::cbAyudaMult: Callback del botón que activa los globos de ayuda
 *                       flotante para cada botón del multímetro.
 * El Callaback consta de la función static e inline cbAyudaMult y cbAyudaMultIn.
*******************************************************************************/
void Multimetro::cbAyudaMult(Fl_Widget* pboton, void *pany){
     Multimetro* pmult=(Multimetro*)pany;
     pmult->cbAyudaMultIn();
}

void Multimetro::cbAyudaMultIn(){
     if (oayudaMult->value() == 1){
        Fl_Tooltip::enable();
     }
     else{
         Fl_Tooltip::disable(); 
     }
}

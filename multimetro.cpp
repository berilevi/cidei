// Class automatically generated by Dev-C++ New Class wizard

#include "multimetro.h" // class's header file

int isec_mult;

// class constructor
Multimetro::Multimetro()
{
                
    Fl_Light_Button *omult_on;
    Fl_Repeat_Button *oSel_mult;
    isec_mult=0;
    strcpy(cvalor,"0.000");
    ogroup_mult = new Fl_Group (695,5,300,300,"");
     ogroup_mult->box(FL_ENGRAVED_FRAME);
     ogroup_mult->deactivate();
     odisp_mult  = new Fl_7Seg (710,15,260,105,"");
     odisp_mult->box(FL_EMBOSSED_FRAME);
     odisp_mult->segment_gap(2);
     omult_on = new Fl_Light_Button(960,280,30,20,"ON");
     omult_on->labelsize(9);
     oSel_mult = new Fl_Repeat_Button(768,230,150,25,"Selección de Instrumento");
     oSel_mult->labelsize(12);
     ov_ac = new Fl_Light_Button(745,160,10,10,"V_ac");
     ov_ac->labelsize(12);
     ov_ac->box(FL_NO_BOX);
     ov_ac->align(FL_ALIGN_RIGHT);
     ov_dc = new Fl_Light_Button(825,160,10,10,"V_dc");
     ov_dc->labelsize(12);
     ov_dc->box(FL_NO_BOX);
     ov_dc->align(FL_ALIGN_RIGHT);
     oa_ac = new Fl_Light_Button(905,160,10,10,"A_ac");
     oa_ac->labelsize(12);
     oa_ac->box(FL_NO_BOX);
     oa_ac->align(FL_ALIGN_RIGHT);
     oa_dc = new Fl_Light_Button(745,200,10,10,"A_dc");
     oa_dc->labelsize(12);
     oa_dc->box(FL_NO_BOX);
     oa_dc->align(FL_ALIGN_RIGHT);
     oohmetro = new Fl_Light_Button(825,200,10,10,"R");
     oohmetro->labelsize(12);
     oohmetro->box(FL_NO_BOX);
     oohmetro->align(FL_ALIGN_RIGHT);
     ocont = new Fl_Light_Button(905,200,10,10,"Cont");
     ocont->labelsize(12);
     ocont->box(FL_NO_BOX);
     ocont->align(FL_ALIGN_RIGHT);      
     ogroup_mult-> end();
     
    oSel_mult->callback(cb_sel_instrumento, this);
    omult_on->callback(cb_mult_on, this);
}

// class destructor
Multimetro::~Multimetro()
{
	// insert your code here
}

/*
 * Este método es el callback del boton selector de instrumentos
 * en el multímetro
 */
void Multimetro::cb_sel_instrumento(Fl_Widget* pboton, void *any)
{
     Multimetro* pmult=(Multimetro*)any;
     pmult->cb_sel_instrumento_in();
}

/**
* Esta función acompaña la función  cb_sel_instrumento 
* para realizar los llamados de callback del selector de instrumento
* en el multimetro 
*/
void Multimetro::cb_sel_instrumento_in(){

if (isec_mult==0){
     ocont->value(0);
     ov_ac->value(1);
     instrument = volt_ac;
     }
     if (isec_mult==1){
     ov_ac->value(0);
     ov_dc->value(1);
     instrument = volt_dc;
     Fl::add_timeout(0.5, cb_timer_mult, this);
     }
     if (isec_mult==2){
     ov_dc->value(0);
     oa_ac->value(1);
     instrument = amp_ac;
     }
     if (isec_mult==3){
     oa_ac->value(0);
     oa_dc->value(1);
     instrument = amp_dc;
     }
     if (isec_mult==4){
     oa_dc->value(0);
     oohmetro->value(1);
     instrument = ohm;
     }
     if (isec_mult==5){
     oohmetro->value(0);
     ocont->value(1);
     instrument = continuidad;
     isec_mult=-1;
     }
     isec_mult++;
}

/*
 * Este método es el callback del boton selector de instrumentos
 * en el multímetro
 */
void Multimetro::cb_mult_on(Fl_Widget* pboton, void *any)
{
     Multimetro* pmult=(Multimetro*)any;
     pmult->cb_mult_on_in();
}

/**
* Esta función acompaña la función  cb_sel_instrumento 
* para realizar los llamados de callback del selector de instrumento
* en el multimetro 
*/
void Multimetro::cb_mult_on_in(){
     
}

/**
* Este método coloca el valor de la medición en el display
* del multímetro.
*/
void Multimetro::set_disp_mult(char svalor [4 ]){
     odisp_mult->value(svalor);      
}

/**
 * Este método es el callback del timer para realizar la solicitud 
 * de datos del canal 1 del osciloscopio al hardware.  
*/
void Multimetro::cb_timer_mult(void *pany)
{
     Multimetro* pmult=(Multimetro*)pany;
     pmult->cb_timer_mult_in();
}

/**
 * Esta función acompaña la función cb_timer_ch1
 * para realizar los llamados de callback del timer 
*/
void Multimetro::cb_timer_mult_in(){

     Encapsular('D','P',0x3F,'1','0');
     Transmision();
     set_disp_mult((receive_buf_mult));
     Fl::repeat_timeout(0.5, cb_timer_mult, this);
}

// Class automatically generated by Dev-C++ New Class wizard

#include "osciloscopio.h" // class's header file

int isec_dual;            // Variable global para realizar la secuencia del menu dual 
int isec_trigger;         // Variable global para realizar la secuencia de la selección del canal fuente del trigger
int isec_acople;          // Variable global para realizar la secuencia del acople del canal 1
int isec_acople2;         // Variable global para realizar la secuencia del acople del canal 2
bool bsuma;               // Variable global que indica si se activó la operación de suma de las señales
bool bresta;              // Variable global que indica si se activó la operación de resta de las señales
bool bx_y;                // Variable global que indica si se activó la operación x vs y con las 2 señales 
bool btrigger1;           // Variable global que indica si se activó la fuente del trigger en el canal 1
bool btrigger2;           // Variable global que indica si se activó la fuente del trigger en el canal 2


// Constructor de clase
Osciloscopio::Osciloscopio(int x, int y, int w, int h, const char *l, int ncol) {
                               
    Fl_Tooltip::disable();                                        // Inicio desactivado de las ayudas flotantes
    strcpy(cnombre,"osc.txt");                                    // Nombre para el archivo de texto donde se almacenan los datos
    ct_div = '1';                                                 // Variable para almacenar el caracter que se va a enviar de la escala de Tiempo por division
    
    //    Inicialización de las variables globales
    
    isec_trigger = 0;                                                      
    isec_acople = 0;          
    isec_acople2 = 0;
    isec_dual = 0;
    bsuma = 0;
    bresta = 0;
    bx_y = 0;
    btrigger1 = 0;
    btrigger2 = 0;
    
    {              
    ogroup_osc = new Fl_Group (5,5,725,360,"");                   // Inicia el grup de los elementos del osciloscopio
    ogroup_osc->box(FL_ENGRAVED_FRAME);                 
    ogroup_osc->box(FL_UP_BOX);
    ogroup_osc->deactivate();                           
    canal1 = new Canal(415,9,152,205,"",255);                     // Instancia de canal para crear el objeto canal 1
    canal2 = new Canal(573,9,152,205,"",250);                     // Instancia de canal para crear el objeto canal 2
    
    och1_on = new Fl_Light_Button(420,15,35,15,"ON");             // Botón para activar/desactivar el canal 1
    och1_on->labelsize(10);
    //och1_on->tooltip("Botón para activar o desactivar el uso del canal 1");
    
    och2_on = new Fl_Light_Button(578,15,35,15,"ON");             // Botón para activar/desactivar el canal 2
    och2_on->labelsize(10);
    //och2_on->tooltip("Botón para activar o desactivar el uso del canal 2");
    
    ogroup_dual = new Fl_Group (415,330,200,30,"");              //Inicio del grupo de los controles de las operaciones en modo dual
    ogroup_dual->box(FL_ENGRAVED_FRAME);
    ogroup_dual->deactivate();
    odual_menu = new Fl_Repeat_Button(425,336,40,18,"Dual");      //Botón para seleccionar la operación dual suma resta o lissajous 
    odual_menu->labelsize(10);
    odual_menu->deactivate();
    //odual_menu->tooltip("Botón para seleccionar la operación dual de las gráficas");
    
    osuma = new Fl_Box(490,345,10,10,"Suma");                     // Indicador de la operación de suma de las dos señales
    osuma->labelsize(10);
    osuma->box(FL_ENGRAVED_BOX);
    osuma->align(FL_ALIGN_TOP);
    oresta = new Fl_Box(530,345,10,10,"Resta");                   // Indicador de la operación de resta de las dos señales
    oresta->labelsize(10);
    oresta->box(FL_ENGRAVED_BOX);
    oresta->align(FL_ALIGN_TOP);
    ox_y = new Fl_Box(570,345,10,10,"XY");                       // Indicador de la operación x vs y 
    ox_y->labelsize(9);
    ox_y->box(FL_ENGRAVED_BOX);
    ox_y->align(FL_ALIGN_TOP);
    ogroup_dual->end();                                           // Fin del grupo de controles de las operaciones en modo dual   
    
    olog_osc  = new Fl_Button (340,8,40,14,"Log");                // Boton para activar el almacenamiento en archivo de texto los datos
    olog_osc->labelsize(9);
   // olog_osc->tooltip("Botón para iniciar a archivar los datos de las gráficas");
    
    ohelp_osc  = new Fl_Button (340,24,40,14,"Help");             // Botón que activa la ayuda del instrumento
    ohelp_osc->labelsize(9); 
    //ohelp_osc->tooltip("Botón para iniciar el archivo de ayuda de uso del instrumento ");
    
    oayuda_osc  = new Fl_Check_Button (385,13,20,16,"a");         // Activa las ayudas flotantes de los botones del instrumento
    oayuda_osc->labelsize(12);
    //oayuda_osc->tooltip("CheckBox para iniciar las ayudas flotantes del uso del los botones del instrumento");
    
    ogrilla_on = new Fl_Light_Button(250,13,45,17,"Grilla");      // Activa/desactiva la cuadricula de la pantalla del instrumento   
    ogrilla_on->labelsize(10);
    
    ogroup_tdiv = new Fl_Group (620,218,106,142,"");              //Inicia el grupo de los controles de tiempo por división
    ogroup_tdiv->box(FL_ENGRAVED_FRAME);
    ogroup_tdiv->deactivate();
    otiempo_div = new Fl_Knob (633,230,80,80,"TDIV");            //Selector de la escala de tiempo por división
    otiempo_div->color(147);
    otiempo_div->type(8);
    otiempo_div->labelsize(9);
    otiempo_div->scaleticks(17);
    otiempo_div->range(0,17);
    otiempo_div->step(1);
    otiempo_div->round(1);
    //otiempo_div->tooltip("Selector de las escalas de tiempo por división del instrumento");
    
    omenu_t_div = new Fl_Choice(645,330,60,20,"");                //Menú selector de la escala de tiempo por división
    omenu_t_div->add("0.5s",0,(Fl_Callback *)cb_tdiv05s,this);
    omenu_t_div->add("0.2s",0,(Fl_Callback *)cb_tdiv02s,this);
    omenu_t_div->add("0.1s",0,(Fl_Callback *)cb_tdiv01s,this);           
    omenu_t_div->add("50ms",0,(Fl_Callback *)cb_tdiv50ms,this);
    omenu_t_div->add("20ms",0,(Fl_Callback *)cb_tdiv20ms,this);
    omenu_t_div->add("10ms",0,(Fl_Callback *)cb_tdiv10ms,this);
    omenu_t_div->add("5ms",0,(Fl_Callback *)cb_tdiv5ms,this);
    omenu_t_div->add("2ms",0,(Fl_Callback *)cb_tdiv2ms,this);
    omenu_t_div->add("1ms",0,(Fl_Callback *)cb_tdiv1ms,this);
    omenu_t_div->add("0.5ms",0,(Fl_Callback *)cb_tdiv05ms,this);
    omenu_t_div->add("0.2ms",0,(Fl_Callback *)cb_tdiv02ms,this);
    omenu_t_div->add("0.1ms",0,(Fl_Callback *)cb_tdiv01ms,this);
    omenu_t_div->add("50us",0,(Fl_Callback *)cb_tdiv50us,this);
    omenu_t_div->add("20us",0,(Fl_Callback *)cb_tdiv20us,this);
    omenu_t_div->add("10us",0,(Fl_Callback *)cb_tdiv10us,this);
    omenu_t_div->add("5us",0,(Fl_Callback *)cb_tdiv5us,this);
    omenu_t_div->add("2us",0,(Fl_Callback *)cb_tdiv2us,this);
    omenu_t_div->add("1us",0,(Fl_Callback *)cb_tdiv1us,this);
    ogroup_tdiv->end();                                                   //Fin del grupo de controles de escala de tiempo por división
    
    ogroup_pos = new Fl_Group (415,218,100,110,"");                       //Inicio del grupo de controles de posición horizontal de las gráfica
    ogroup_pos->box(FL_ENGRAVED_FRAME);
    ogroup_pos->deactivate();           
    opos_y = new Fl_Knob (435,250,60,60,"XPos");                         //Perilla de dezplazamiento horizontal de las gráficas
    opos_y->color(180);
    opos_y->scaleticks(0);
    opos_y->cursor(40);
    opos_y->labelsize(10);
    opos_y->range(-100,100);
    //opos_y->tooltip("Boton de posicionamiento horizontal de las gráficas");
    ogroup_pos->end();                                                    //Fin del grupo de controles de posición horizontal de las gráficas   
    
    ostop = new Fl_Light_Button(420,222,35,30,"");                        //Botón para detención de las gráficas
    ostop->label("@|>");
    //ostop->tooltip("Botón para detener la imagen graficada en el osciloscopio");
    
    ogroup_trigger = new Fl_Group (520,218,95,110,"");                    //Inicio del grupo de controles del trigger del instrumento        
    ogroup_trigger->box(FL_ENGRAVED_FRAME);
    ogroup_trigger->deactivate();
    osel_trigger = new Fl_Repeat_Button(528,230,40,18,"Trigger");         //Botón para seleccionar el canal que es la fuente del disparo
    osel_trigger->labelsize(10);
    //osel_trigger->tooltip("Botón para seleccionar el canal fuente del trigger");
    
    otrigger_ch1 = new Fl_Box(577,225,10,10,"Ch1");                       //Indicador de canal 1 fuente del trigger      
    otrigger_ch1->labelsize(10);
    otrigger_ch1->box(FL_ENGRAVED_BOX);
    otrigger_ch1->align(FL_ALIGN_RIGHT);
    
    otrigger_ch2 = new Fl_Box(577,245,10,10,"Ch2");                       //Indicador de canal 2 fuente del trigger
    otrigger_ch2->labelsize(10);
    otrigger_ch2->box(FL_ENGRAVED_BOX);
    otrigger_ch2->align(FL_ALIGN_RIGHT);
    
    onivel_trigger = new Fl_Knob (540,255,57,57,"Nivel");                 //Perilla para seleccionar el nivel del trigger
    onivel_trigger->color(180);
    onivel_trigger->scaleticks(0);
    onivel_trigger->cursor(40);
    onivel_trigger->labelsize(10);
    onivel_trigger->range(0,10);
    ogroup_trigger->end();                                                // Fin del grupo de controles del trigger
                
    opantalla = new Fl_Scope(12,40,400,320,"");                           // Instancia de scope para la pantalla del osciloscopio
    opantalla->tracetype(FL_SCOPE_TRACE_LOOP);                            // Forma en que se colocan los datos para graficar
    opantalla->redrawmode(FL_SCOPE_REDRAW_ALWAYS);                        // La gráfica se redibuja cuando se adiciona cada dato                        
    opantalla->linetype(FL_SCOPE_LINE);                                   // La gráfica se forma con lineas entre dos puntos
    opantalla->box(FL_FLAT_BOX);                                          // La pantalla es un cuadro sin relieve
    
    Manual_osc = new Fl_Help_Dialog;                                      // Ventana de ayuda que sale al presionar el botón help
    Manual_osc->load("help_osciloscopio.html");                           // Cargar el archivo html que contiene la ayuda.
    
    ogroup_osc->end();                                                    //Fin del grupo de los elementos del osciloscopio
    }
    
    ogrilla = new grid(12,40,400,320,"");                                 //Instancia de la cuadricula para la pantalla 
    ogrilla->banalizador_on = 0;                                          //En cero para que no se active la grilla del analizador
    
    obox_nombre = new Fl_Box(15,8,175,30,"OSCILOSCOPIO");                 //Cuadro para colocar el nombre del instrumento
    obox_nombre->box(FL_ENGRAVED_FRAME);
    obox_nombre->labelfont(FL_HELVETICA_BOLD);
    obox_nombre->labelsize(20);
    
    oosc_on = new Fl_Light_Button(195,8,38,30,"ON");                      //Botón para encender o apagar el osciloscopio
    //oosc_on->tooltip("Botón para encender o apagar el osciloscopio");
    oosc_on->labelsize(10);            
                
    // Callbacks de los botones del osciloscopio            
                
    och1_on->callback(cb_ch1_on,this);
    och2_on->callback(cb_ch2_on,this);
    odual_menu->callback(cb_dual_menu, this);    
    osel_trigger->callback(cb_sel_trigger, this);
    otiempo_div->callback(cb_tiempo_div, this);
    opos_y->callback(cb_pos_y, this);
    oosc_on->callback(cb_osc_on, this);
    olog_osc->callback(cb_log_osc, this);
    ogrilla_on->callback(cb_grilla, this);
    ostop->callback(cb_stop,this);
    oayuda_osc->callback(cb_ayuda, this);
    canal1->ovolt_div->callback(cb_volt_div1, this);
    canal1->osel_acople->callback(cb_acople1, this);
    canal2->ovolt_div->callback(cb_volt_div2, this);
    canal2->osel_acople->callback(cb_acople2, this);
    ohelp_osc->callback(cb_help,this);
}


/*******************************************************************************
* Callback del botón que enciende o apaga el osciloscopio.
*
* Para los callbacks de los botones en las clases se deben tener 2 funciones que
* van juntas y se debe tener en cuenta las siguientes caracteristicas.
* Los Callbacks deben ser definidos como estaticos (static).
* La función declarada como static es una función simple que inicializa el 
* apuntador this de la clase y hace un llamado a una segunda función que se   
* declara como inline que es donde se realiza el codigo que se debe ejecutar en 
* el callback; la funcion inline no necesita parametros ya que tiene acceso a 
* todos los métodos y variables de la clase. 
*******************************************************************************/
void Osciloscopio::cb_osc_on(Fl_Widget* pboton, void *pany){
     Osciloscopio* posc=(Osciloscopio*)pany;              //Casting  del apuntador void para que tenga el tamaño de un objeto Osciloscopio    
     posc->cb_osc_on_in();                                //Llamado a la función inline sin argumentos.
}

/*******************************************************************************
* Osciloscopio::cb_osc_on_in: Función inline del callback del botón que prende o  
*                             apaga el osciloscopio.
* Al encender el osciloscopio se inicia con las siguientes configuraciones por 
* defecto: canal 1 activado, 5 voltios por división, 1mS por división, acople ac
* y fuente de trigger canal 1. 
*******************************************************************************/
void Osciloscopio::cb_osc_on_in(){
      if (oosc_on->value()== 1){                                
         activar(1);                                            
         Encapsular('A','a','1','0',0x00,0x00);                 //Trama de encendido del canal 1.
         Transmision();                                         //Transmitir al hardware la trama anterior
         if (bhardware){                                        //Si la respuesta fue ack la orden fue reconocida por el hardware
            activar(1);                                         //Activar el instrumento virtual osciloscopio                                        
            ogroup_osc->activate();                              
            ogroup_tdiv->activate();
            ogroup_trigger->activate();
            ogroup_pos->activate(); 
            ogroup_dual->activate();    
            och1_on->value(1);
            canal1->activar(1);
            canal1->opos_x->value(0);
            canal1->ogroup_ch->activate();
            canal1->ogroup_ch->box(FL_UP_BOX);
            ogroup_tdiv->box(FL_UP_BOX);
            ogroup_trigger->box(FL_UP_BOX);
            otrigger_ch1->color(FL_RED);
            otrigger_ch1->redraw();
            btrigger1 = 1;
            isec_trigger = 1;
            ogroup_pos->box(FL_UP_BOX);
            ogroup_dual->box(FL_UP_BOX);
            otiempo_div->value(8);
            omenu_t_div->value(8);
            canal1->ovolt_div->value(0);
            canal1->omenu_v_div->value(0);
            canal1->oacop_ac->color(FL_RED);
            canal1->oacop_ac->redraw();
            isec_acople=1;
            opantalla->bch1 = 1;
            muestreo_timer(1);                                   //Muestrear por vectores deacuerdo a la escala de tiempo por división.
         }                                                       
         else {                                                  //Si la respuesta fue NAK o error en la comunicación USB
              fl_message("Error de hardware");                   
              oosc_on->value(0);                                 //Osciloscopio desactivado
              oosc_on->box(FL_UP_BOX);                           //Restablecer el botón para un nuevo intento
         }  
      }
      oosc_on->box(FL_DOWN_BOX);
      if (oosc_on->value()== 0){                                 //Presionar el botón para apagar el instrumento
         Fl::remove_timeout(cb_timer, this);                     //Terminar el timer de solicitud de datos uno a uno 
         Fl::remove_timeout(cb_timer_vectores, this);            //Terminar el timer de solicitud de datos por vectores
         ogroup_tdiv->box(FL_ENGRAVED_BOX);
         ogroup_trigger->box(FL_ENGRAVED_BOX);
         ogroup_pos->box(FL_ENGRAVED_BOX);
         ogroup_dual->box(FL_ENGRAVED_BOX);
         oayuda_osc->value(0);
         Encapsular('A','b','1','0',0x00,0x00);                  //Trama para apagar el canal 1
         opantalla->bch1 = 0;
         Transmision();
         if (bhardware){
            och1_on->value(0);
            canal1->activar(0);
            canal1->~Canal();
            canal1->ogroup_ch->box(FL_ENGRAVED_BOX);
            canal1->ogroup_ch->deactivate();
         }
         else {
             fl_message("Error de hardware");                    
         }
         Encapsular('B','b','1','0',0x00,0x00);                  //Trama para apagar el canal 2
         opantalla->bch2 = 0;
         Transmision();
         if (bhardware){
           och2_on->value(0);
           canal2->activar(0);
           canal2->~Canal();
           canal2->ogroup_ch->box(FL_ENGRAVED_BOX);
           canal2->ogroup_ch->deactivate();
           odual_menu->deactivate();
         }
         else {
             fl_message("Error de hardware");
         }
         activar(0);
         opantalla->bch2 = 0;
         opantalla->bch1 = 0;
         opantalla->TraceColour(FL_BLACK);
         ogroup_osc->deactivate(); 
         ogroup_tdiv->deactivate();
         odual_menu->deactivate();
         isec_trigger = 0;
         otrigger_ch1->color(FL_GRAY);
         otrigger_ch1->redraw();
         btrigger1 = 0;
         otrigger_ch2->color(FL_GRAY);
         otrigger_ch2->redraw();
         btrigger2 = 0;         
         isec_acople = 0;          
         isec_acople2 = 0;
         isec_dual = -1;
         bsuma = 0;
         bresta = 0;
         bx_y = 0;
         osuma->color(FL_GRAY);
         osuma->redraw();
         oresta->color(FL_GRAY);
         oresta->redraw();
         ox_y->color(FL_GRAY);
         osuma->redraw();
         opantalla->bdual = 0;
         opantalla->blissajous = 0;
         oosc_on->box(FL_UP_BOX);
      }
}


/*******************************************************************************
* Osciloscopio::cb_grilla: Callback del botón para activar o desactivar la 
*                          cuadricula que permite realizar las mediciones en la 
*                          pantalla del osciloscopio.
* El Callaback consta de la función static e inline cb_grilla y cb_grilla_in.
* ogrilla->bgrid = 1 : Activa la cuadricula de 10 x 8 
* ogrilla->bgrid = 0 : Desactiva la grilla de 10 x 8 y deja solo los ejes que 
*                      dividen en 4 la pantalla. 
********************************************************************************/
void Osciloscopio::cb_grilla(Fl_Widget* pboton, void *pany){
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_grilla_in();
}

void Osciloscopio::cb_grilla_in(){
     if (ogrilla_on->value()==1){
        ogrilla->bgrid = 1;
     }
     else{
         ogrilla->bgrid = 0; 
     }
     ogrilla->redraw();
}


/*******************************************************************************
* Osciloscopio::cb_stop: Callback del botón para detener las gráficas en la 
*                        pantalla del osciloscopio.
* El Callaback consta de la función static e inline cb_stop y cb_stop_in.
* Si el botón esta presionado no se hace llamado a la función recorrer_datos()
* es decir no se envían datos para ser graficados.
*******************************************************************************/
void Osciloscopio::cb_stop(Fl_Widget* pboton, void *pany){
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_stop_in();
}

void Osciloscopio::cb_stop_in(){
     if (ostop->value()==1){
        ostop->box(FL_DOWN_BOX);
     }
     else{
         ostop->box(FL_UP_BOX);
     }
}


/*******************************************************************************
* Osciloscopio::cb_ch1_on: Callback del botón para encender o apagar el canal 1 
*                          del osciloscopio. 
* El Callaback consta de la función static e inline cb_ch1_on y cb_ch1_on_in.
* Para activar el canal se deben detener los timers de solicitud de muestras al
* hardware que esten activos para reiniciar nuevamente sincronizados de acuerdo
* con la escala de tiempo por divisíon que el usuario haya seleccionado.
* Se activan los controles propios del canal y si el canal 2 se encuentra activo
* se activan las operaciones entre las dos señales.  
*******************************************************************************/

void Osciloscopio::cb_ch1_on(Fl_Widget* pboton, void *pany){
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_ch1_on_in();
}

void Osciloscopio::cb_ch1_on_in(){
     if (och1_on->value()== 1){
        Fl::remove_timeout(cb_timer,this);                        //Detener el timer de solicitud de datos uno a uno
        Fl::remove_timeout(cb_timer_vectores,this);               //Detener el timer de solicitud de datos por vectores
        Encapsular('A','a','1','0',0x00,0x00);                    //Activar canal 1 en el hardware
        Transmision();
        if (bhardware){
           canal1->activar(1);
           canal1->ogroup_ch->activate();
           canal1->ogroup_ch->box(FL_UP_BOX);
           opantalla->bch1 = 1;
           if (canal2->bestado== 1){                              //Si el canal 2 ya está activo se habilitan las operaciones entre las dos señales
              odual_menu->activate();
           }
           if (otiempo_div->value() >= 8){                         // !!!! Toca cambiarlo a >= 2 
              Encapsular('L','d','1',ct_div,0x00,0x00);            // Configurar escala de Tiempo por division muestreo por vectores 
              Transmision();
              if (bhardware){
                 muestreo_timer(1);                                //Solicitar al hardware muestras por vectores
              }
              else{
                   fl_message("Error de hardware");
              }
           }
           else {
                Encapsular('L','d','1','B',0x00,0x00);            //Configurar escala de Tiempo por division muestreo por vectores 
                Transmision();
                if (bhardware){
                   muestreo_timer(2);                             //Solicitar al hardware muestras una a una.
                }
                else{
                   fl_message("Error de hardware");
                }
           }
        }
        else {
             fl_message("Error de hardware");
        }    
     }
     else{
        if (canal2->bestado== 0){                                        
           Fl::remove_timeout(cb_timer,this);
           Fl::remove_timeout(cb_timer_vectores,this);
        }
        Encapsular('A','b','1','0',0x00,0x00);                         //Desactivar canal 1 en hardware
        opantalla->bch1 = 0;
        Transmision();
        if (bhardware){
           canal1->activar(0);
           canal1->ogroup_ch->box(FL_ENGRAVED_BOX);
           canal1->ogroup_ch->deactivate();
           odual_menu->deactivate();
        }
        else {
             fl_message("Error de hardware");
        }   
     }
}


/*******************************************************************************
* Osciloscopio::cb_ch2_on: Callback del botón para encender o apagar el canal 2 
*                          del osciloscopio. 
* El Callaback consta de la función static e inline cb_ch2_on y cb_ch2_on_in.
* Para activar el canal se deben detener los timers de solicitud de muestras al
* hardware que esten activos para reiniciar nuevamente sincronizados de acuerdo
* con la escala de tiempo por divisíon que el usuario haya seleccionado.
* Se activan los controles propios del canal y si el canal 1 se encuentra activo
* se activan las operaciones entre las dos señales.  
*******************************************************************************/

void Osciloscopio::cb_ch2_on(Fl_Widget* pboton, void *pany){
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_ch2_on_in();
}

void Osciloscopio::cb_ch2_on_in(){
     if (och2_on->value()== 1){
        Fl::remove_timeout(cb_timer,this);
        Fl::remove_timeout(cb_timer_vectores,this);
        Encapsular('B','a','1','0',0x00,0x00);                      //Activar canal 2 en hardware
        Transmision();
        if (bhardware){
           canal2->activar(1);
           canal2->ogroup_ch->activate();
           canal2->ogroup_ch->box(FL_UP_BOX);
           canal2->oacop_ac->color(FL_RED);
           canal2->oacop_ac->redraw();
           isec_acople2 = 1;
           canal2->ovolt_div->value(0);
           canal2->omenu_v_div->value(0);
           opantalla->bch2 = 1;
           if (canal1->bestado== 1){
              odual_menu->activate();                               //Si el canal 1 está activo se habilitan las operaciones entre las dos señales 
           }
           if (otiempo_div->value() >= 8){                          // !!!!  Toca cambiarlo a >= 2                
              Encapsular('L','d','1',ct_div,0x00,0x00);             //Configurar escala de Tiempo por division muestreo por vectores 
              Transmision();
              if (bhardware){
                 muestreo_timer(1);                                 //Solicitar al hardware muestras por vectores
              }
              else{
                   fl_message("Error de hardware");
              }
           }
           else {
                Fl::remove_timeout(cb_timer,this);
                Fl::remove_timeout(cb_timer_vectores,this);
                Encapsular('L','d','1','B',0x00,0x00);            //Configurar escala de Tiempo por division muestreo por vectores 
                Transmision();
                if (bhardware){
                   muestreo_timer(2);                             //Solicitar al hardware muestras una a una
                }
                else{
                   fl_message("Error de hardware");
                }
           }
        }
        else {
             fl_message("Error de hardware");
        }
     }
     else{
        if (canal1->bestado == 0){
           Fl::remove_timeout(cb_timer,this);
           Fl::remove_timeout(cb_timer_vectores,this);
           //opantalla->TraceColour(FL_BLACK);
        }
        Encapsular('B','b','1','0',0x00,0x00);                      //Desactivar canal 2 por hardware
        opantalla->bch2 = 0;
        Transmision();
        if (bhardware){
           canal2->activar(0);
           canal2->ogroup_ch->box(FL_ENGRAVED_BOX);
           canal2->ogroup_ch->deactivate();
           odual_menu->deactivate();
        }
        else {
             fl_message("Error de hardware");
        } 
     }
}


/*******************************************************************************
* Osciloscopio::cb_dual_menu: Callback del botón del menú de las funciones duales 
*                             entre gráficas en el osciloscopio.
* El Callaback consta de la función static e inline cb_dual_menu y cb_dual_menu_in.
* Esta secuencia se activa solo si los dos canales están activos.
* Al presionar el botón "dual" se selecciona una de las 3 operaciones entre las
* dos señales: Suma, Resta o X vs Y.
* isec_dual: Variable tipo entero que representa la operación dual solicitada por
*            el usuario.
* isec_dual = 0: Operación de suma entre las señales de los dos canales;
*                se representa en la pantalla canal1 + canal2.
* isec_dual = 1: Operación de Resta entre las señales de los dos canales;
*                se representa en la pantalla canal1 - canal2.
* isec_dual = 3: Operación de X vs Y entre las señales de los dos canales;
*                se representa en la pantalla canal1 vs canal2, si las señales
*                son periodicas, se grafica la figura de lissajous resultante.
*******************************************************************************/

void Osciloscopio::cb_dual_menu(Fl_Widget* pboton, void *pany){
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_dual_menu_in();
}

void Osciloscopio::cb_dual_menu_in(){
     if (isec_dual==0){                                        //Activar función de gráfica canal1 + canal2
        ox_y->color(FL_GRAY);
        ox_y->redraw();
        bx_y = 0;                                              
        bsuma = 1;                                             
        osuma->color(FL_RED);
        osuma->redraw();
        opantalla->bdual = 1;
     }
     if (isec_dual==1){                                        //Activar función de gráfica canal1 - canal2
        bsuma = 0;
        bresta = 1;
        osuma->color(FL_GRAY);
        osuma->redraw();
        oresta->color(FL_RED);
        oresta->redraw();
        opantalla->bdual = 1;
     }
     if (isec_dual==2){                                        //Activar función de gráfica canal1 vs canal2
        oresta->color(FL_GRAY);
        oresta->redraw();
        bresta = 0;
        bx_y = 1;
        ox_y->color(FL_RED);
        ox_y->redraw();
        opantalla->bdual = 1;
        opantalla->blissajous = 1;
     }
     if (isec_dual==3){                                        //Activar gráfica canal1 y canal2 sin operaciones
        ox_y->color(FL_GRAY);
        ox_y->redraw();
        bx_y = 0;
        opantalla->bdual = 0;
        opantalla->blissajous = 0;
        isec_dual=-1;
     }
     isec_dual++;
}

/*******************************************************************************
 * Osciloscopio::cb_sel_trigger: Callback del botón selector del canal fuente del 
 *                               disparo (trigger) en el osciloscopio.  
 * El Callaback consta de la función static e inline cb_sel_trigger y 
 * cb_sel_trigger_in.
 * Al presionar el boton "Trigger" se selecciona el canal en el cual se compara
 * el nivel del trigger ajustado por el usuario para iniciar el almacenamiento 
 * de datos.  
 * isec_trigger: Variable que representa la opción del canal fuente de trigger
 *               seleccionado por el usuario.
 * isec_trigger = 0: Canal 1 fuente del disparo.
 * isec_trigger = 1: Canal 2 fuente del disparo.
*******************************************************************************/

void Osciloscopio::cb_sel_trigger(Fl_Widget* pboton, void *pany){
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_sel_trigger_in();
}

void Osciloscopio::cb_sel_trigger_in(){
     if (isec_trigger==0){
        otrigger_ch2->color(FL_GRAY);
        otrigger_ch2->redraw();
        otrigger_ch1->color(FL_RED);
        otrigger_ch1->redraw();
        /* TODO (JuanPablo#1#): Encapsular trama de canal fuente de trigger */
     }
     if (isec_trigger==1){
        otrigger_ch1->color(FL_GRAY);
        otrigger_ch1->redraw();
        otrigger_ch2->color(FL_RED);
        otrigger_ch2->redraw();
        isec_trigger=-1;
     }
     isec_trigger++;
}

/*******************************************************************************
 * cb_tiempo_div: Callback del selector de escala de tiempo por división en el 
 *                osciloscopio. 
 * El Callaback consta de la función static e inline cb_tiempo_div y 
 * cb_tiempo_div_in.
 * El selector "T_Div" controla las 18 opciones de escala de tiempo por división
 * que modifican la frecuencia de muestreo en el hardware.
 * Las opciones 0 y 1 son para frecuencias de muestreo muy bajas y se solicitan 
 * las muestras una a una desde el software. 
 * Las opciones de la 2 a la 17 solicitan al hardware el cambio en la frecuencia 
 * de muestreo, el almacenamiento de las muestras en la memoria y luego solicita
 * las muestras en 4 vectores de 147 datos. 
*******************************************************************************/
void Osciloscopio::cb_tiempo_div(Fl_Widget* psel, void *pany){
     Fl_Knob *pselector = (Fl_Knob *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tiempo_div_in(pselector);
}


void Osciloscopio::cb_tiempo_div_in(Fl_Widget* psel){
     Fl_Knob *pselector = (Fl_Knob *)psel;
     omenu_t_div->value(pselector->value());
     if (pselector->value()>=8){                                   // !!!!! Toca cambiarlo a >= 2 
                                                                   // !!! agregar las tramas de protocolo faltantes   
     
        if (pselector->value()== 8){
           ct_div = '1';                                     //Caracter que representa en el protocolo la escala de tiempo por división.
        } 
        else if (pselector->value() == 9){
            ct_div = '2';                                    
        } 
        else if (pselector->value() == 10){
            ct_div = '3';                                   
        } 
        else if (pselector->value() == 11){
            ct_div = '4';                                    
        } 
        else if (pselector->value() == 12){
            ct_div = '5';                                     
        } 
        else if (pselector->value() == 13){
            ct_div = '6';                                    
        }   
        else if (pselector->value() == 14){
            ct_div = '7';                                    
        }
        else if (pselector->value() == 15){
            ct_div = '8';                                    
        }
        else if (pselector->value() == 16){
            ct_div = '9';                                    
        }
        else if (pselector->value() == 17){
            ct_div = 'A';                                     
        }    
        Encapsular('L','d','1',ct_div,0x00,0x00);                       //Trama de configuración de escala de Tiempo por division menor de 0.1s
        Fl::remove_timeout(cb_timer,this);
        Fl::remove_timeout(cb_timer_vectores,this); 
        Transmision();
        if (bhardware){
           muestreo_timer(1);                                           //Solicitar envío de muestras en vectores 
        }
        else
             fl_message("Error de hardware");
     }
     else {
          Encapsular('L','d','1','B',0x00,0x00);                        // !!!!!cambiar 'B' por 'F' //Trama de configuración de escala de Tiempo por division mayor de 0.1s
          Fl::remove_timeout(cb_timer,this);
          Fl::remove_timeout(cb_timer_vectores,this);        
          Transmision();
          if (bhardware)
             muestreo_timer(2);                                         //Solicitar envío de muestras en una a una
     }
}

/*******************************************************************************
 * Osciloscopio::cb_volt_div1: Callback del selector de la escala de volt/div
 *                             del canal 1 del osciloscopio.
 * El Callaback consta de la función static e inline cb_volt_div1 y 
 * cb_volt_div1_in.
 * El selector "V_Div" del canal 1 controla las 12 opciones de escala de 
 * atenuación o amplificación de la señal sensada con el canal 1 del osciloscopio
 * con las cuales se va a visualizar la señal en la pantalla. 
 * Las opciones se envían en tramas del protocolo como caracteres hexadecimales
 * desde el '0' hasta 'C'.
*******************************************************************************/
void Osciloscopio::cb_volt_div1(Fl_Widget* psel, void *pany){
     Fl_Knob *pselector = (Fl_Knob *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;          
     posc->cb_volt_div1_in(pselector);
}


void Osciloscopio::cb_volt_div1_in(Fl_Widget* psel){
     Fl_Knob *pselector = (Fl_Knob *)psel;
     canal1->omenu_v_div->value(pselector->value());                
     if (int((pselector->value()))== 9){
         Encapsular('A','c','1','A',0x00,0x00);                             //Trama con la configuración seleccionada por el usuario
         Transmision();
     }
     else if (int((pselector->value()))== 10){
        Encapsular('A','c','1','B',0x00,0x00);
         Transmision();
     }
     else if (int((pselector->value()))== 11){
         Encapsular('A','c','1','C',0x00,0x00);
         Transmision();                            
     }
     else if (int((pselector->value()))== 0){
         Encapsular('A','c','1','1',0x00,0x00);
         Transmision();                            
     }
     else if (int((pselector->value()))== 1){
         Encapsular('A','c','1','2',0x00,0x00);
         Transmision();                            
     }
     else if (int((pselector->value()))== 2){
         Encapsular('A','c','1','3',0x00,0x00);
         Transmision();                            
     }
     else if (int((pselector->value()))== 3){
         Encapsular('A','c','1','4',0x00,0x00);
         Transmision();                            
     }
     else if (int((pselector->value()))== 4){
         Encapsular('A','c','1','5',0x00,0x00);
         Transmision();                            
     }
     else if (int((pselector->value()))== 5){
         Encapsular('A','c','1','6',0x00,0x00);
         Transmision();                            
     }
     else if (int((pselector->value()))== 6){
         Encapsular('A','c','1','7',0x00,0x00);
         Transmision();                            
     }
     else if (int((pselector->value()))== 7){
         Encapsular('A','c','1','8',0x00,0x00);
         Transmision();                            
     }
     else if (int((pselector->value()))== 8){
         Encapsular('A','c','1','9',0x00,0x00);
         Transmision();                            
     }
}


/*******************************************************************************
 * Osciloscopio::cb_volt_div2: Callback del selector de la escala de volt/div
 *                             del canal 2 del osciloscopio.
 * El Callaback consta de la función static e inline cb_volt_div2 y 
 * cb_volt_div2_in.
 * El selector "V_Div" del canal 2 controla las 12 opciones de escala de 
 * atenuación o amplificación de la señal sensada con el canal 2 del osciloscopio
 * con las cuales se va a visualizar la señal en la pantalla. 
 * Las opciones se envían en tramas del protocolo como caracteres hexadecimales
 * desde el '0' hasta 'C'.
*******************************************************************************/
void Osciloscopio::cb_volt_div2(Fl_Widget* psel, void *pany){
     Fl_Knob *pselector = (Fl_Knob *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;          
     posc->cb_volt_div2_in(pselector);
}
  
void Osciloscopio::cb_volt_div2_in(Fl_Widget* psel){
     Fl_Knob *pselector = (Fl_Knob *)psel;
     canal2->omenu_v_div->value(pselector->value());                
     if (int((pselector->value()))== 9){
         Encapsular('B','c','1','A',0x00,0x00);
         Transmision();
     }
     else if (int((pselector->value()))== 10){
        Encapsular('B','c','1','B',0x00,0x00);
         Transmision();
     }
     else if (int((pselector->value()))== 11){
         Encapsular('B','c','1','C',0x00,0x00);
         Transmision();                            
     }
     else if (int((pselector->value()))== 0){
         Encapsular('B','c','1','1',0x00,0x00);
         Transmision();                            
     }
     else if (int((pselector->value()))== 1){
         Encapsular('B','c','1','2',0x00,0x00);
         Transmision();                            
     }
     else if (int((pselector->value()))== 2){
         Encapsular('B','c','1','3',0x00,0x00);
         Transmision();                            
     }
     else if (int((pselector->value()))== 3){
         Encapsular('B','c','1','4',0x00,0x00);
         Transmision();                            
     }
     else if (int((pselector->value()))== 4){
         Encapsular('B','c','1','5',0x00,0x00);
         Transmision();                            
     }
     else if (int((pselector->value()))== 5){
         Encapsular('B','c','1','6',0x00,0x00);
         Transmision();                            
     }
     else if (int((pselector->value()))== 6){
         Encapsular('B','c','1','7',0x00,0x00);
         Transmision();                            
     }
     else if (int((pselector->value()))== 7){
         Encapsular('B','c','1','8',0x00,0x00);
         Transmision();                            
     }
     else if (int((pselector->value()))== 8){
         Encapsular('B','c','1','9',0x00,0x00);
         Transmision();                            
     }
}


/*******************************************************************************
 * Osciloscopio::cb_pos_y: Callback de la perilla que configura la posición 
 *                         horizontal de la gráfica de la señal. 
 * El Callaback consta de la función static e inline cb_pos_y y cb_pos_y_in.
 * El valor que el usuario configura con la perilla "Pos_x" se envía al objeto
 * opantalla y se le suma al punto de inicio de la gráfica en la pantalla para
 * generar el desplazamiento horizontal. 
 * Luego de la modificación se debe redibujar tanto las gráficas como la grilla
 * si está activa. 
*******************************************************************************/

void Osciloscopio::cb_pos_y(Fl_Widget* psel, void *pany){
     Fl_Knob *pselector = (Fl_Knob *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_pos_y_in(pselector);
}

void Osciloscopio::cb_pos_y_in(Fl_Widget* psel){
     Fl_Knob *pselector = (Fl_Knob *)psel;
     pselector->value(floor(pselector->value()));
     opantalla->ipos_x =  int(pselector->value());
     ogrilla->redraw(); 
     opantalla->redraw();  
}

/*******************************************************************************
 * Osciloscopio::cb_timer: Callback del timer para realizar la solicitud de 
 *                         datos muestreados uno a uno.
 * El Callaback consta de la función static e inline cb_timer y cb_timer_in.
 * Cada vez que ocurre el timer se envía la trama de solicitud de muestra, luego 
 * el dato se envía para ser graficado; la repetición del timer se realiza 
 * deacuerdo a la escala de tiempo por división que se haya seleccionado. 
*******************************************************************************/

void Osciloscopio::cb_timer(void *pany){
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_timer_in();
}

void Osciloscopio::cb_timer_in(){
     Encapsular('L','y','1','0',0x00,0x00);                               //Trama de solicitud al hardware de una muestra de la señal en los canales activos      
     Transmision();
     if (canal1->bestado && canal2->bestado){                             //Ambos canales activos 
        recorrer_datos(3);
     }
     else if (canal1->bestado== 1 && canal2->bestado== 0){
          recorrer_datos(1);
     }
     else if (canal1->bestado== 0 && canal2->bestado== 1){
          recorrer_datos(2);
     }
     if(otiempo_div->value()== 0){
        Fl::repeat_timeout(0.5, cb_timer, this);                          //Repetición del timer.
     }
     if(otiempo_div->value()== 1){
        Fl::repeat_timeout(0.2, cb_timer, this);
     }
     if(otiempo_div->value()== 2){
        Fl::repeat_timeout(0.1, cb_timer, this);
     }
     if(otiempo_div->value()== 3){
        Fl::repeat_timeout(0.05, cb_timer, this);
     }
     if(otiempo_div->value()== 4){
        Fl::repeat_timeout(0.02, cb_timer, this);
     }
     if(otiempo_div->value()== 5){
        Fl::repeat_timeout(0.01, cb_timer, this);
     }
     if(otiempo_div->value()== 6){
        Fl::repeat_timeout(0.005, cb_timer, this);
     }
     if(otiempo_div->value()== 7){
        Fl::repeat_timeout(0.002, cb_timer, this);
     }
}


/*******************************************************************************
 * Osciloscopio::cb_timer_vectores: Callback del timer para realizar la solicitud 
 *                                  de muestras por vectores de datos.  
 * El Callaback consta de la función static e inline cb_timer_vectores y 
 * cb_timer_vectores_in.
 * Con la trama Osc14 se le ordena al hardware que muestree las señales en 
 * el(los) canal(es) activos a la frecuencia de muestreo que esté configurada.
 * Cuando el hardware haya terminado de adquirir las muestras se solicitan los
 * cuatro vectores de 147 datos de los canales activos con la trama Osc16.
 * Si está presionado el botón de detención de la gráfica, no se envian los
 * datos para ser graficados.
*******************************************************************************/
void Osciloscopio::cb_timer_vectores(void *pany){
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_timer_vectores_in();
}

void Osciloscopio::cb_timer_vectores_in(){
     if (canal1->bestado && ~canal2->bestado){
        Encapsular('L', 'p', '1', '0',0x00,0x00);                //Trama Osc14   
        Transmision();
        if (ch1_muestreado){                                     //El hardware termino de adquirir las muetras del canal 1
           Encapsular('A', 'p', '1', '1',0x00,0x00);             //Trama Osc16 
           Transmision();
           Encapsular('A', 'p', '1', '2',0x00,0x00);             
           Transmision();
           Encapsular('A', 'p', '1', '3',0x00,0x00);             
           Transmision();
           Encapsular('A', 'p', '1', '4',0x00,0x00);             
           Transmision();
           if (ostop->value() == 0)                              // Si está presionado el botón de stop, no se envian los datos para ser graficados
              recorrer_datos(1);
        }
     }
     if (canal2->bestado && ~canal1->bestado){
        Encapsular('L', 'p', '1', '0',0x00,0x00);
        Transmision();
        if (ch2_muestreado){                                     //El hardware termino de adquirir las muetras del canal 2
           Encapsular('B', 'p', '1', '1',0x00,0x00);             //Trama Osc16
           Transmision();
           Encapsular('B', 'p', '1', '2',0x00,0x00);
           Transmision();
           Encapsular('B', 'p', '1', '3',0x00,0x00);
           Transmision();
           Encapsular('B', 'p', '1', '4',0x00,0x00);
           Transmision();
           if (ostop->value() == 0)
              recorrer_datos(2);
        }
     }
     if (canal1->bestado && canal2->bestado){                    
        Encapsular('L', 'p', '1', '0',0x00,0x00);
        Transmision();
        if (ch1_muestreado && ch2_muestreado){                   //El hardware termino de adquirir las muetras de los 2 canales
           Encapsular('A', 'p', '1', '1',0x00,0x00);             //Trama Osc16
           Transmision();
           Encapsular('A', 'p', '1', '2',0x00,0x00);
           Transmision();
           Encapsular('A', 'p', '1', '3',0x00,0x00);
           Transmision();
           Encapsular('A', 'p', '1', '4',0x00,0x00);
           Transmision();
           Encapsular('B', 'p', '1', '1',0x00,0x00);
           Transmision();
           Encapsular('B', 'p', '1', '2',0x00,0x00);
           Transmision();
           Encapsular('B', 'p', '1', '3',0x00,0x00);
           Transmision();
           Encapsular('B', 'p', '1', '4',0x00,0x00);
           Transmision();
           if (ostop->value() == 0)
              recorrer_datos(3);
        }
     }
    Fl::repeat_timeout(0.05, cb_timer_vectores, this);           //Repetición del timer
}



/*******************************************************************************
 * Osciloscopio::recorrer_datos: Rutina que recorre el arreglo buf_osc_chx que
 *                               contiene las muestras de la señal y envía los 
 *                               datos al objeto opantalla para generar la 
 *                               gráfica de las señales. 
 * num_canal: Variable argumento que indica que canal(es) se debe(n) gráficar.                              
 * num_canal = 1: Enviar los datos para graficar la señal del canal 1.
 * num_canal = 2: Enviar los datos para graficar la señal del canal 2.
 * num_canal = 3: Enviar los datos para graficar las señales de los dos canales.
 * bsuma: Variable que indica que se ha seleccionado la operación de suma de las
 *        dos señales.
 * bresta: Variable que indica que se ha seleccionado la operación de resta de las
 *        dos señales.
 * bx_y: Variable que indica que se ha seleccionado la operación x vs y de las
 *        dos señales.
 * Si la escala de tiempo por división es menor que 2 se envía solo un dato para
 * ser graficado.
 * Si la escala de tiempo por división es mayor que 2 se debe recorrer el arreglo
 * para enviar dato por dato.
*******************************************************************************/

void Osciloscopio::recorrer_datos(int num_canal){
     int icont;
     if (num_canal == 1){
     opantalla->TraceColour(Fl_Color(canal1->ncolor));
     free(opantalla->ScopeData2);
        //if (omenu_t_div->value()<8){                           // !!!!!!!!!Toca cambiarlo a < 2 
        if (otiempo_div->value()<8){
           idato_graf_ch1 = idato_osc_ch1;
           opantalla->Add((canal1->opos_x->value()*255)+(idato_graf_ch1*255),255); 
           ogrilla->redraw();
        }
        else{
             for(icont=0;icont < DATA_OSC-1; icont++){
                 idato_graf_ch1 = buf_osc_ch1[icont];
                 opantalla->Add((canal1->opos_x->value()*255)+(idato_graf_ch1*255),255); 
                 ogrilla->redraw();           
             }   
        }                
     }
     if (num_canal == 2){
        opantalla->TraceColour(Fl_Color(canal2->ncolor));
        //if (omenu_t_div->value()<8){                                // !!!!!!!!!Toca cambiarlo a < 2 
        if (otiempo_div->value()<8){
           idato_graf_ch2 = idato_osc_ch2;
           opantalla->Add(255,(canal2->opos_x->value()*255)+(idato_graf_ch2*255)); 
           ogrilla->redraw();
        }
        else{
            for(icont=0;icont < DATA_OSC-1; icont++){ 
                idato_graf_ch2 = buf_osc_ch2[icont];
                opantalla->Add(255,(canal2->opos_x->value()*255)+(idato_graf_ch2*255)); 
                ogrilla->redraw();
            }
        }                 
     }
     if (num_canal == 3){
        //if (omenu_t_div->value() < 8){                                  // !!!!!!!!!Toca cambiarlo a < 2 
        if (otiempo_div->value()<8){
           opantalla->TraceColour(Fl_Color(canal2->ncolor));           
           idato_graf_ch2 = idato_osc_ch2;
           idato_graf_ch1 = idato_osc_ch1; 
           if (bsuma == 1){
              opantalla->Add((canal1->opos_x->value()*255)+((idato_graf_ch2*255)+(idato_graf_ch1*255)),255);
              ogrilla->redraw();
           }
           else if (bresta == 1){
               opantalla->Add((canal1->opos_x->value()*255)+((idato_graf_ch2*255)-(idato_graf_ch1*255)),255);  
               ogrilla->redraw(); 
           }
           else if (bx_y == 1){     
                opantalla->bdual = 1;
                opantalla->blissajous = 1;
                opantalla->Add((canal1->opos_x->value()*255)+(idato_graf_ch1*255),(canal2->opos_x->value()*255)+(idato_graf_ch2*255)); //es
                ogrilla->redraw();
           }
           else if (bx_y == 0 && bsuma == 0 && bresta == 0){       
                opantalla->Add((canal1->opos_x->value()*255)+(idato_graf_ch1*255),(canal2->opos_x->value()*255)+(idato_graf_ch2*255)); //es
                ogrilla->redraw();
           }
        }
        else{
            for(icont=0;icont < DATA_OSC-1; icont++){
                idato_graf_ch1 = buf_osc_ch1[icont];
                idato_graf_ch2 = buf_osc_ch2[icont];
                if (bsuma == 1){          
                   opantalla->Add((canal1->opos_x->value()*255)+((idato_graf_ch2*255)+(idato_graf_ch1*255)),255); //es  
                   ogrilla->redraw();              
                }
                else if (bresta == 1){     
                   opantalla->Add((canal1->opos_x->value()*255)+((idato_graf_ch2*255)-(idato_graf_ch1*255)),255); //es 
                   ogrilla->redraw();               
                }
                else if (bx_y == 1){              
                   opantalla->bdual = 1;
                   opantalla->blissajous = 1;
                   opantalla->Add((idato_graf_ch1*255),(idato_graf_ch2*255)); 
                   ogrilla->redraw();           
                }
                else if (bx_y == 0 && bsuma == 0 && bresta == 0){
                     opantalla->Add((canal1->opos_x->value()*255)+(idato_graf_ch1*255),(canal2->opos_x->value()*255)+(idato_graf_ch2*255)); //es
                     ogrilla->redraw();
                }
            }              
        }                   
     }      
}


/*******************************************************************************
 * Osciloscopio::cb_log_osc: Callback del botón que activa el almacenamiento en 
 *                           archivos planos de texto de los datos capturados 
 *                           para el osciloscopio.  
 * El Callaback consta de la función static e inline cb_log_osc y cb_log_osc_in.
 * osc_ch1.txt: Archivo plano de texto que contiene los datos muestreados de la
 *              señal del canal 1. 
 * osc_ch2.txt: Archivo plano de texto que contiene los datos muestreados de la
 *              señal del canal 2.
*******************************************************************************/

void Osciloscopio::cb_log_osc(Fl_Widget* pboton, void *pany){
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_log_osc_in();
}

void Osciloscopio::cb_log_osc_in(){
    ofstream log("osc_ch1.txt");
    for(int icont=0;icont < DATA_OSC-1; icont++){
         log << buf_osc_ch1[icont] << endl;             
    }
	log.close(); 
	
	
	ofstream log2("osc_ch2.txt");
    for(int icont=0;icont < DATA_OSC-1; icont++){
         log2 << buf_osc_ch2[icont] << endl;             
    }
	log2.close();
}


/*******************************************************************************
 * Osciloscopio::muestreo_timer: Rutina para iniciar uno de los timers deacuerdo 
 *                               a la escala de tiempo por división seleccionada.
 * isel: Variable que indica la selección de timer.                              
 * isel = 1: Selecciona el timer para solicitar al hardware los cuatro vectores
 *           que contienen los datos muestrados de la(s) señal(es) presente(s) 
 *           en el(los) canal(es) activo(s).
 * isel = 2: Selecciona el timer para solicitar al hardware una muestra de la
 *           señal presente en el(los) canal(es) activo(s).          
*******************************************************************************/

void Osciloscopio::muestreo_timer(int isel){
     if (isel==1){
        Fl::add_timeout(0.2, cb_timer_vectores, this);
     }
     else{
        Fl::add_timeout(0.3, cb_timer, this);
     }
}


/*******************************************************************************
 * Osciloscopio::cb_acople1: Callback del botón selector del modo de acople
 *                           del canal 1 del osciloscopio. 
 * El Callaback consta de la función static e inline cb_acople1 y cb_acople1_in.
 * isec_acople : Variable que representa la selección del tipo de acople para
 *               el canal 1.
 * isec_acople = 0 : Acople AC.  
 * isec_acople = 1 : Acople DC.
 * isec_acople = 2 : Acople GND.
*******************************************************************************/

void Osciloscopio::cb_acople1(Fl_Widget* pboton, void *pany){
     Osciloscopio* posc=(Osciloscopio*)pany;       
     posc->cb_acople1_in();
}

void Osciloscopio::cb_acople1_in(){
  if (isec_acople==0){
     canal1->oacop_gnd->color(FL_GRAY);
     canal1->oacop_gnd->redraw();
     Encapsular('A', 'e', '1', '2',0x00,0x00);
     Transmision();
     if (bhardware){
        canal1->oacop_ac->color(FL_RED);
        canal1->oacop_ac->redraw();
     }
     else{
         fl_message("Error de hardware"); 
     }
  }
  if (isec_acople==1){
     canal1->oacop_ac->color(FL_GRAY);
     canal1->oacop_ac->redraw();
     Encapsular('A', 'e', '1', '1',0x00,0x00);
     Transmision();
     if (bhardware){
        canal1->oacop_dc->color(FL_RED);
        canal1->oacop_dc->redraw();
     }
     else{
         fl_message("Error de hardware"); 
     }
  }
  if (isec_acople==2){
     canal1->oacop_dc->color(FL_GRAY);
     canal1->oacop_dc->redraw();
     Encapsular('A', 'e', '1', '3',0x00,0x00);
     Transmision();
      if (bhardware){
         canal1->oacop_gnd->color(FL_RED);
         canal1->oacop_gnd->redraw();
      }
     else{
         fl_message("Error de hardware"); 
     }
     isec_acople=-1;
  }
     isec_acople++;  
}


/*******************************************************************************
 * Osciloscopio::cb_acople2: Callback del botón selector del modo de acople
 *                           del canal 2 del osciloscopio. 
 * El Callaback consta de la función static e inline cb_acople2 y cb_acople2_in.
 * isec_acople : Variable que representa la selección del tipo de acople para
 *               el canal 2.
 * isec_acople2 = 0 : Acople AC.  
 * isec_acople2 = 1 : Acople DC.
 * isec_acople2 = 2 : Acople GND.
*******************************************************************************/

void Osciloscopio::cb_acople2(Fl_Widget* pboton, void *pany){
     Osciloscopio* posc=(Osciloscopio*)pany;       
     posc->cb_acople2_in();
}

void Osciloscopio::cb_acople2_in(){
  if (isec_acople2==0){
     canal2->oacop_gnd->color(FL_GRAY);
     canal2->oacop_gnd->redraw();
     Encapsular('B', 'e', '1', '2',0x00,0x00);
     Transmision();
     if (bhardware){
        canal2->oacop_ac->color(FL_RED);
        canal2->oacop_ac->redraw();
     }
     else{
         fl_message("Error de hardware"); 
     }
  }
  if (isec_acople2==1){
     canal2->oacop_ac->color(FL_GRAY);
     canal2->oacop_ac->redraw();
     Encapsular('B', 'e', '1', '1',0x00,0x00);
     Transmision();
     if (bhardware){
        canal2->oacop_dc->color(FL_RED);
        canal2->oacop_dc->redraw();
     }
     else{
         fl_message("Error de hardware"); 
     }
  }
  if (isec_acople2==2){
     canal2->oacop_dc->color(FL_GRAY);
     canal2->oacop_dc->redraw();
     Encapsular('B', 'e', '1', '3',0x00,0x00);
     Transmision();
      if (bhardware){
         canal2->oacop_gnd->color(FL_RED);
         canal2->oacop_gnd->redraw();
      }
     else{
         fl_message("Error de hardware"); 
     }
     isec_acople2=-1;
  }
     isec_acople2++;  
}


/*******************************************************************************
 * Osciloscopio::cb_ayuda: Callback del botón que activa los globos de ayuda
 *                         flotante para cada botón del osciloscopio.
 * El Callaback consta de la función static e inline cb_ayuda y cb_ayuda_in.
*******************************************************************************/
void Osciloscopio::cb_ayuda(Fl_Widget* pboton, void *pany){
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_ayuda_in();
}

void Osciloscopio::cb_ayuda_in(){
     if (oayuda_osc->value() == 1){
        Fl_Tooltip::enable();
     }
     else{
         Fl_Tooltip::disable(); 
     }
}


/*******************************************************************************
 * Osciloscopio::cb_help: Callback del botón que lanza la ayuda del uso del
 *                        instrumento. 
 * El Callaback consta de la función static e inline cb_help y cb_help_in.
 * Se despliega una ventana de ayuda con un archivo en html con la guia de
 * usuario del instrumento.
*******************************************************************************/
void Osciloscopio::cb_help(Fl_Widget* pboton, void *any){
     Osciloscopio* posc=(Osciloscopio*)any;
     posc->cb_help_in();
}

void Osciloscopio::cb_help_in(){
      Manual_osc->show();
}


/*******************************************************************************
 * Osciloscopio::cb_tdivXXs: Callbacks del menú de tiempo por división para 
 *                           modificar la posición de la perilla selectora de la
 *                           escala de tiempo por división.
 * Están los 18 callbacks pertenecientes a cada una de las escalas que tiene el
 * menú. 
*******************************************************************************/

void Osciloscopio::cb_tdiv05s(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector);
}

void Osciloscopio::cb_tdiv05s_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}

void Osciloscopio::cb_tdiv02s(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv02s_in(pselector);
}

void Osciloscopio::cb_tdiv02s_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


void Osciloscopio::cb_tdiv01s(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv01s_in(pselector);
}

void Osciloscopio::cb_tdiv01s_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


void Osciloscopio::cb_tdiv50ms(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv50ms_in(pselector);
}

void Osciloscopio::cb_tdiv50ms_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


void Osciloscopio::cb_tdiv20ms(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv20ms_in(pselector);
}

void Osciloscopio::cb_tdiv20ms_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


void Osciloscopio::cb_tdiv10ms(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv10ms_in(pselector);
}

void Osciloscopio::cb_tdiv10ms_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}

void Osciloscopio::cb_tdiv5ms(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv5ms_in(pselector);
}

void Osciloscopio::cb_tdiv5ms_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


void Osciloscopio::cb_tdiv2ms(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv2ms_in(pselector);
}

void Osciloscopio::cb_tdiv2ms_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


void Osciloscopio::cb_tdiv1ms(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv1ms_in(pselector); 
}

void Osciloscopio::cb_tdiv1ms_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}



void Osciloscopio::cb_tdiv05ms(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05ms_in(pselector);
}

void Osciloscopio::cb_tdiv05ms_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}

void Osciloscopio::cb_tdiv02ms(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv02ms_in(pselector);
}

void Osciloscopio::cb_tdiv02ms_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}



void Osciloscopio::cb_tdiv01ms(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv01ms_in(pselector);
}

void Osciloscopio::cb_tdiv01ms_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


void Osciloscopio::cb_tdiv50us(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv50us_in(pselector);
}

void Osciloscopio::cb_tdiv50us_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


void Osciloscopio::cb_tdiv20us(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv20us_in(pselector); 
}

void Osciloscopio::cb_tdiv20us_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}

void Osciloscopio::cb_tdiv10us(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv10us_in(pselector);
}

void Osciloscopio::cb_tdiv10us_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}

void Osciloscopio::cb_tdiv5us(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv5us_in(pselector);
}

void Osciloscopio::cb_tdiv5us_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


void Osciloscopio::cb_tdiv2us(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv2us_in(pselector); 
}

void Osciloscopio::cb_tdiv2us_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}

void Osciloscopio::cb_tdiv1us(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv1us_in(pselector);
}

void Osciloscopio::cb_tdiv1us_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


// Destructor de clase
Osciloscopio::~Osciloscopio(){
	// insert your code here
}

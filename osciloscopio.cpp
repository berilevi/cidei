// Class automatically generated by Dev-C++ New Class wizard

#include "osciloscopio.h" // class's header file
#include <FL/Fl.H>

int isec_ch;              // Variable global para realizar la secuencia de la selección de canales 
int isec_dual;            // Variable global para realizar la secuencia del menu dual 
int isec_trigger;         // Variable global para realizar la secuencia del menu dual
int isec_acople;          // Variable global para realizar la secuencia del acople


// class constructor
Osciloscopio::Osciloscopio(int x, int y, int w, int h, const char *l, int ncol):Instrumento()
{
    icolor = ncol;                              //Color de fondo de la pantalla del osciloscopio
    strcpy(cnombre,"osc.txt");                  //Nombre para el archivo de texto donde se almacenan los datos
            
    opantalla = new Fl_Scope(8,8,380, 304,"");  //Instancia de scope
    opantalla ->TraceColour(FL_WHITE);          //Color de la grafica
    opantalla->tracetype(FL_SCOPE_TRACE_LOOP);  
    opantalla->redrawmode(FL_SCOPE_REDRAW_ALWAYS);
    opantalla->linetype(FL_SCOPE_LINE);
    
    oosc_on = new Fl_Light_Button(650,340,30,20,"ON");
    oosc_on->labelsize(9);
                
    ogroup_osc = new Fl_Group (5,5,680,360,"");    // Agrupa los elementos del osciloscopio
    ogroup_osc->box(FL_ENGRAVED_FRAME); 
    ogroup_osc->deactivate();
    canal1 = new Canal(400,9,130,230,"",100); 
    canal2 = new Canal(545,9,130,230,"",250);
    osel_ch = new Fl_Repeat_Button(110,335,40,18,"Canal");
    osel_ch->labelsize(10);
    och1 = new Fl_Light_Button(160,340,10,10,"CH1");
    och1->labelsize(10);
    och1->box(FL_NO_BOX);
    och1->align(FL_ALIGN_TOP);
    och2 = new Fl_Light_Button(185,340,10,10,"CH2");
    och2->labelsize(10);
    och2->box(FL_NO_BOX);
    och2->align(FL_ALIGN_TOP);
    odual_menu = new Fl_Repeat_Button(230,335,40,18,"Dual");
    odual_menu->labelsize(10);
    odual_menu->deactivate();
    osuma = new Fl_Light_Button(290,340,10,10,"Suma");
    osuma->labelsize(10);
    osuma->box(FL_NO_BOX);
    osuma->align(FL_ALIGN_TOP);
    oresta = new Fl_Light_Button(325,340,10,10,"Resta");
    oresta->labelsize(10);
    oresta->box(FL_NO_BOX);
    oresta->align(FL_ALIGN_TOP);
    ox_y = new Fl_Light_Button(355,340,10,10,"X_Y");
    ox_y->labelsize(10);
    ox_y->box(FL_NO_BOX);
    ox_y->align(FL_ALIGN_TOP);
    olog_osc  = new Fl_Button (15,320,40,18,"Log");
    olog_osc->labelsize(10);
    ohelp_osc  = new Fl_Button (15,342,40,18,"Help");
    ohelp_osc->labelsize(10);
    ogroup_osc->end();  
    
    ogroup_tdiv = new Fl_Group (400,243,240,115,"");    //Agrupa los controles de tiempo por división
    ogroup_tdiv->box(FL_ENGRAVED_FRAME);
    ogroup_tdiv->deactivate();
    otiempo_div = new Fl_Knob (405,250,70,70,"T_DIV");
    otiempo_div->color(147);
    otiempo_div->type(8);
    otiempo_div->labelsize(9);
    otiempo_div->scaleticks(17);
    otiempo_div->range(0,17);
    omenu_t_div = new Fl_Choice(415,335,50,20,"");
    omenu_t_div->add("0.5 s",FL_ALT,(Fl_Callback *)cb_tdiv05s,this);
    omenu_t_div->add("0.2 s",FL_ALT,(Fl_Callback *)cb_tdiv02s,this);
    omenu_t_div->add("0.1 s",FL_ALT,(Fl_Callback *)cb_tdiv01s,this);
    omenu_t_div->add("50 m",FL_ALT,(Fl_Callback *)cb_tdiv50ms,this);
    omenu_t_div->add("20 m",FL_ALT,(Fl_Callback *)cb_tdiv20ms,this);
    omenu_t_div->add("10 m",FL_ALT,(Fl_Callback *)cb_tdiv10ms,this);
    omenu_t_div->add("5 m",FL_ALT,(Fl_Callback *)cb_tdiv5ms,this);
    omenu_t_div->add("2 m",FL_ALT,(Fl_Callback *)cb_tdiv2ms,this);
    omenu_t_div->add("1 m",FL_ALT,(Fl_Callback *)cb_tdiv1ms,this);
    omenu_t_div->add("0.5 m",FL_ALT,(Fl_Callback *)cb_tdiv05ms,this);
    omenu_t_div->add("0.2 m",FL_ALT,(Fl_Callback *)cb_tdiv02ms,this);
    omenu_t_div->add("0.1 m",FL_ALT,(Fl_Callback *)cb_tdiv01ms,this);
    omenu_t_div->add("50 u",FL_ALT,(Fl_Callback *)cb_tdiv50us,this);
    omenu_t_div->add("20 u",FL_ALT,(Fl_Callback *)cb_tdiv20us,this);
    omenu_t_div->add("10 u",FL_ALT,(Fl_Callback *)cb_tdiv10us,this);
    omenu_t_div->add("5 u",FL_ALT,(Fl_Callback *)cb_tdiv5us,this);
    omenu_t_div->add("2 u",FL_ALT,(Fl_Callback *)cb_tdiv2us,this);
    omenu_t_div->add("1 u",FL_ALT,(Fl_Callback *)cb_tdiv1us,this);            
    opos_y = new Fl_Knob (495,255,50,50,"X-Pos");
    opos_y->color(180);
    opos_y->scaleticks(0);
    opos_y->cursor(40);
    opos_y->range(0,10);
    ov_posx = new Fl_Value_Output(500,335,50,20,"");
    osel_trigger = new Fl_Repeat_Button(580,310,40,18,"Trigger");  
    osel_trigger->labelsize(10);
    otrigger_ch1 = new Fl_Light_Button(580,275,10,10,"Ch1");
    otrigger_ch1->labelsize(10);
    otrigger_ch1->box(FL_NO_BOX);
    otrigger_ch1->align(FL_ALIGN_RIGHT);
    otrigger_ch2 = new Fl_Light_Button(580,295,10,10,"Ch2");
    otrigger_ch2->labelsize(10);
    otrigger_ch2->box(FL_NO_BOX);
    otrigger_ch2->align(FL_ALIGN_RIGHT);
    ogroup_tdiv->end();
                
    osel_ch->callback(cb_sel_ch, this);
    odual_menu->callback(cb_dual_menu, this);    
    osel_trigger->callback(cb_sel_trigger, this);
    otiempo_div->callback(cb_tiempo_div, this);
    opos_y->callback(cb_pos_y, this);
    oosc_on->callback(cb_osc_on, this);
    olog_osc->callback(cb_log_osc, this);
    canal1->ovolt_div->callback(cb_volt_div, this);
    canal1->osel_acople->callback(cb_acople, this);
}


// class destructor
Osciloscopio::~Osciloscopio()
{
	// insert your code here
}

// sets the value of bsuma
void Osciloscopio::Setbsuma(bool bx)
{
	bsuma = bx;
}

// sets the value of bx_y
void Osciloscopio::Setbx_y(bool bx)
{
	bx_y = bx;
}

// sets the value of ipos_x
void Osciloscopio::Setipos_x(int ix)
{
	ipos_x = ix;
}

// sets the value of it_div
void Osciloscopio::Setit_div(int ix)
{
	it_div = ix;
}

// sets the value of ifrec_muestreo
void Osciloscopio::Setifrec_muestreo(int ix)
{
	ifrec_muestreo = ix;
}

// sets the value of nnivel_trigger
void Osciloscopio::Setinivel_trigger(int ix)
{
	inivel_trigger = ix;
}

// sets the value of bdual
void Osciloscopio::Setbdual(bool bx)
{
	bdual = bx;
}

/*
 * Método para sumar las señales adquiridas por los 2 canales
 * del instrumento.
 */
void Osciloscopio::sumar(int idato1[], int idato2[])
{
     int icont1;
     for (icont1=0; icont1 < inum_datos; icont1++){
         idatos[icont1] = idato1[icont1]+idato2[icont1]; // Suma de las dos señales para el eje y
     }
}

/*
 * Método para restar las señales adquiridas por los 2 canales
 * del instrumento 
 */
void Osciloscopio::restar(int idato1[], int idato2[])
{
     int icont1;
     for (icont1=0; icont1 < inum_datos; icont1++){
         idatos[icont1] = idato1[icont1] - idato2[icont1];    //Diferencia de las dos señales para el eje y
     }
}

/*
 * Método para realizar gráficas de lissajous con las señales 
 * de los 2 canales.
 */
void Osciloscopio::lissajous(int idato1[], int idato2[])
{
     int icont1;
     for (icont1=0; icont1 < inum_datos; icont1++){
         idatos[icont1] = idato1[icont1];                     //Datos del canal 1 para el eje y
     }
}

/**
 * Este método es el callback del boton que enciende el osciloscopio 
 * debe ir acompañada de una función inline para poder realizar los callbacks. 
*/
void Osciloscopio::cb_osc_on(Fl_Widget* pboton, void *pany)
{
     Osciloscopio* posc=(Osciloscopio*)pany;       //
     posc->cb_osc_on_in();
}

/**
 * Esta función acompaña la función  cb_osc_on 
 * para realizar los llamados de callback del boton que enciende
 * el osciloscopio 
*/
void Osciloscopio::cb_osc_on_in(){
      if (oosc_on->value()== 1){
         activar(1);
         Encapsular('A','a','1','0');
         Transmision();
         if (bhardware){
            activar(1);
            ogroup_osc->activate(); 
            ogroup_tdiv->activate();     
            och1->value(1);
            canal1->activar(1);
            canal1->ogroup_ch->activate();
            otiempo_div->value(6);
            omenu_t_div->value(6);
            canal1->ovolt_div->value(0);
            /* TODO (JuanPablo#1#): Configurar el valor por defecto de acople del canal */
            //fl_message("muestrear");
            muestrear(1);
         }
         else {
              fl_message("Error de hardware");
         }
      }
      if (oosc_on->value()== 0){
//         Fl::remove_timeout(cb_timer_ch2, this);
         Fl::remove_timeout(cb_timer_ch1, this);
         activar(0);
         ogroup_osc->deactivate(); 
         ogroup_tdiv->deactivate();
      }
      isec_ch++;
}

/*
 * Este método es el callback del boton selector de canales
 * en el osciloscopio
 */
void Osciloscopio::cb_sel_ch(Fl_Widget* pboton, void *pany)
{
     Osciloscopio* posc=(Osciloscopio*)pany;       
     posc->cb_sel_ch_in();
}

/**
* Esta función acompaña la función  cb_sel_ch 
* para realizar los llamados de callback del selector de canales
* en el osciloscopio 
*/
void Osciloscopio::cb_sel_ch_in(){
     if (isec_ch==0){
        Encapsular('B','b','1','0');         //Desactivar canal 2
    //    Transmision();
    //    if (bhardware){
           och2->value(0);
           canal2->ogroup_ch->deactivate();
           odual_menu->deactivate();
    /*    }
        else {
             fl_message("Error de hardware");
        }*/
        Encapsular('A','a','1','0');           //Activar canal 1
    //    Transmision();
   //     if (bhardware){
           och1->value(1);
           canal1->activar(1);
           canal1->ogroup_ch->activate();
           if (otiempo_div->value() > 9){
           muestrear(1);
           }
           else {
                muestreo_timer();
           }

    /*    }
        else {
             fl_message("Error de hardware");
        }*/
     }
     if (isec_ch==1){
        Encapsular('A','b','1','0');         //Desactivar canal 1
     //   Transmision();
     //   if (bhardware){
           och1->value(0);
           canal1->activar(0);
           canal1->ogroup_ch->deactivate();
     /*   }
        else {
             fl_message("Error de hardware");
        }*/
        Encapsular('B','a','1','0');         //Activar canal 2
     //   Transmision();
     //   if (bhardware){
           och2->value(1);
           canal2->activar(1);
           canal2->ogroup_ch->activate();
     //      muestrear(2);
    /*    }
        else {
             fl_message("Error de hardware");
        }*/
     }
     if (isec_ch==2){
        Encapsular('A','a','1','0');           //Activar canal 1
    //    Transmision();
    //    if (bhardware){
           och1->value(1);
           canal1->activar(1);
           canal1->ogroup_ch->activate();
           odual_menu->activate();
    //       muestrear(3);
    /*    }
        else {
             fl_message("Error de hardware");
        }*/
        isec_ch=-1;
     }
     isec_ch++;
}

/**
 * Este método es el callback del boton del menu de las funciones
 * duales de graficas en el osciloscopio, debe ir acompañada de una 
 * función inline para poder realizar los callbacks. 
*/
void Osciloscopio::cb_dual_menu(Fl_Widget* pboton, void *pany)
{
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_dual_menu_in();
}

/**
 * Esta función acompaña la función  cb_menu_dual 
 * para realizar los llamados de callback del menu de funciones duales
 * de graficas en el osciloscopio 
*/
void Osciloscopio::cb_dual_menu_in(){
     if (isec_dual==0){
     ox_y->value(0);
     osuma->value(1);
     }
     if (isec_dual==1){
     osuma->value(0);
     oresta->value(1);
     }
     if (isec_dual==2){
     oresta->value(0);
     ox_y->value(1);
     isec_dual=-1;
     }
     isec_dual++;
}

/**
 * Este método es el callback del boton selector de la fuente del 
 * disparo (trigger) en el osciloscopio, debe ir acompañada de una 
 * función inline para poder realizar los callbacks.  
*/
void Osciloscopio::cb_sel_trigger(Fl_Widget* pboton, void *pany)
{
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_sel_trigger_in();
}

/**
 * Esta función acompaña la función  cb_sel_trigger para realizar 
 * los llamados de callback del boton selector de la fuente del
 * trigger en el osciloscopio 
*/
void Osciloscopio::cb_sel_trigger_in(){
     if (isec_trigger==0){
     otrigger_ch2->value(0);
     otrigger_ch1->value(1);
     }
     if (isec_trigger==1){
     otrigger_ch1->value(0);
     otrigger_ch2->value(1);
     isec_trigger=-1;
     }
     isec_trigger++;
}

/**
 * Este método es el callback del boton selector de la escala de 
 * tiempo por división en el osciloscopio, debe ir acompañada de una 
 * función inline para poder realizar los callbacks.  
*/
void Osciloscopio::cb_tiempo_div(Fl_Widget* psel, void *pany)
{
     Fl_Knob *pselector = (Fl_Knob *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tiempo_div_in(pselector);
}

/**
 * Esta función acompaña la función  cb_tiempo_div 
 * para realizar los llamados de callback del boton selector de la
 * escala de tiempo por división en el osciloscopio 
*/
void Osciloscopio::cb_tiempo_div_in(Fl_Widget* psel){
     Fl_Knob *pselector = (Fl_Knob *)psel;
     pselector->value(floor(pselector->value()));
     omenu_t_div->value(pselector->value());
     if (pselector->value()==6){
        Encapsular('L','d','1',char((pselector->value())-8));           //Configurar Tiempo por division 
        Transmision();
        if (~bhardware)
           fl_message("Error de hardware");
     }
     else {
          Encapsular('L','d','1','B');
          Transmision();
          if (bhardware)
             muestreo_timer();   
     }
}

/**
 * Este método es el callback del selector de la escala de volt/div
 * del canal del osciloscopio debe ir acompañada de una función 
 * inline para poder realizar los callbacks. 
*/
void Osciloscopio::cb_volt_div(Fl_Widget* psel, void *pany)
{
     Fl_Knob *pselector = (Fl_Knob *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;          
     posc->cb_volt_div_in(pselector);
}

/**
 * Esta función acompaña la función  cb_volt_div  
 * para realizar los llamados de callback del selector de la escala
 * de volt/div del canal en el osciloscopio 
*/
void Osciloscopio::cb_volt_div_in(Fl_Widget* psel){
     Fl_Knob *pselector = (Fl_Knob *)psel;
     pselector->value(floor(pselector->value()));
     canal1->omenu_v_div->value(pselector->value());                
     if (int((pselector->value()))== 10){
         Encapsular('A','c','1','A');
         Transmision();
     }
     else if (int((pselector->value()))== 11){
        Encapsular('A','c','1','B');
         Transmision();
     }
     else if (int((pselector->value()))== 12){
         Encapsular('A','c','1','C');
         Transmision();                            
     }
     else if (int((pselector->value()))== 12){
         Encapsular('A','c','1','C');
         Transmision();                            
     }
     else if (int((pselector->value()))== 1){
         Encapsular('A','c','1','1');
         Transmision();                            
     }
     else if (int((pselector->value()))== 2){
         Encapsular('A','c','1','2');
         Transmision();                            
     }
     else if (int((pselector->value()))== 3){
         Encapsular('A','c','1','3');
         Transmision();                            
     }
     else if (int((pselector->value()))== 4){
         Encapsular('A','c','1','4');
         Transmision();                            
     }
     else if (int((pselector->value()))== 5){
         Encapsular('A','c','1','5');
         Transmision();                            
     }
     else if (int((pselector->value()))== 6){
         Encapsular('A','c','1','6');
         Transmision();                            
     }
     else if (int((pselector->value()))== 7){
         Encapsular('A','c','1','7');
         Transmision();                            
     }
     else if (int((pselector->value()))== 8){
         Encapsular('A','c','1','8');
         Transmision();                            
     }
     else if (int((pselector->value()))== 9){
         Encapsular('A','c','1','9');
         Transmision();                            
     }
}


/**
 * Este método es el callback del boton selector de la posición 
 * de la señal respecto al eje y en el osciloscopio, debe ir acompañada 
 * de una función inline para poder realizar los callbacks.  
*/
void Osciloscopio::cb_pos_y(Fl_Widget* psel, void *pany)
{
     Fl_Knob *pselector = (Fl_Knob *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_pos_y_in(pselector);
}

/**
 * Esta función acompaña la función  cb_pos_y 
 * para realizar los llamados de callback del boton selector de la
 * posición de la señal respecto al eje y en el osciloscopio 
*/
void Osciloscopio::cb_pos_y_in(Fl_Widget* psel){
     Fl_Knob *pselector = (Fl_Knob *)psel;
     pselector->value(floor(pselector->value()));
     ov_posx->value(pselector->value());
}

/**
 * Este método es el callback del timer para realizar la solicitud 
 * de datos del canal 1 del osciloscopio al hardware.  
*/
void Osciloscopio::cb_timer_ch1(void *pany)
{
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_timer_ch1_in();
}

/**
 * Esta función acompaña la función cb_timer_ch1
 * para realizar los llamados de callback del timer 
*/
void Osciloscopio::cb_timer_ch1_in(){
     Encapsular('L','y','1','0');
     Transmision();
     recorrer_datos(isec_ch);
    switch (omenu_t_div->value()){
            case 0:
                 Fl::repeat_timeout(0.002, cb_timer_ch1, this);
                 break;
            case 1:
                 Fl::repeat_timeout(0.005, cb_timer_ch1, this);
                 break; 
            case 2:
                 Fl::repeat_timeout(0.01, cb_timer_ch1, this); 
                 break;
            case 3:
                 Fl::repeat_timeout(0.02, cb_timer_ch1, this); 
                 break;
            case 4:
                 Fl::repeat_timeout(0.05, cb_timer_ch1, this); 
                 break;
            case 5:
                 Fl::repeat_timeout(0.1, cb_timer_ch1, this);
                 break; 
            case 6:      
                 Fl::repeat_timeout(0.2, cb_timer_ch1, this); 
                 break;
            case 7:
                 Fl::repeat_timeout(0.5, cb_timer_ch1, this); 
                 break;
     }
   
}


/**
 * La función recorrer_datos recorre el arreglo idatos y envia punto 
 * por punto los datos para graficar.
*/
void Osciloscopio::recorrer_datos(int num_canal)
{
     int icont;
     if (num_canal == 1){
        if (omenu_t_div->value()<6){
           opantalla->TraceColour(Fl_Color(canal1->ncolor));
           //fl_message("dato es %d", receive_buf[4]);
           idato_graf_ch1 = idato_osc_ch1;
           opantalla->Add((canal1->opos_x->value()*257)+(idato_graf_ch1*257)); //es
           //opantalla->Add((canal1->opos_x->value()) + (1));
        }
        else{
             opantalla->TraceColour(Fl_Color(canal1->ncolor));
             for(icont=0;icont < DATA_OSC-1; icont++){
                 idato_graf_ch1 = buf_osc_ch1[icont];
                 //fl_message("datos grafica es: %d, pos es %d", idato_graf_ch1, icont);
                 if (idato_graf_ch1 == 0){
                    opantalla->Add(560+ canal1->npos_y);
                 }
                 else {
                      opantalla->Add(canal1->npos_y + (idato_graf_ch1));
                 }              
             }   
        }                
     }
     
     if (num_canal == 2){
        opantalla->TraceColour(Fl_Color(canal2->ncolor));
        for(icont=0;icont < DATA_OSC-1; icont++){
            idato_graf_ch2 = buf_osc_ch2[icont];
            if (idato_graf_ch2 == 0){
               opantalla->Add(560+ canal2->npos_y);
            }
            else {
                 opantalla->Add(canal2->npos_y + (560*(idato_graf_ch2)*canal2->nv_div));
            }              
        }                   
     }
     
     if (num_canal == 3){
        for(icont=0;icont < DATA_OSC-1; icont++){
            idato_graf_ch1 = buf_osc_ch1[icont];
            idato_graf_ch2 = buf_osc_ch2[icont];
            if (idato_graf_ch2 == 0 || idato_graf_ch1 == 0){
               opantalla->Add((560 + canal1->npos_y), (560 + canal2->npos_y));
            }
            else {
                 opantalla->Add(canal1->npos_y + (560*(idato_graf_ch1)*canal1->nv_div),
                 canal2->npos_y + (560*(idato_graf_ch2)*canal2->nv_div));
            }              
        }                   
     }
}


/**
 * Este método es el callback del boton que activa el almacenamiento en 
 * archivos planos de texto de los datos capturados para el osciloscopio,  
 * debe ir acompañada de una función inline para poder realizar los callbacks. 
*/
void Osciloscopio::cb_log_osc(Fl_Widget* pboton, void *pany)
{
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_log_osc_in();
}

/**
 * Esta función acompaña la función  cb_log_osc para realizar los 
 * llamados de callback del boton que activa el almacenamiento en archivos
 * planos de texto de los datos capturados para el osciloscopio. 
*/
void Osciloscopio::cb_log_osc_in(){
     archivar();
}


/**
 * Rutina para solicitar los cuatro vectores de las muestras de las 
 * señales en el osciloscopio. 
*/
void Osciloscopio::muestrear(int num_canal){
     int cont;
     if (num_canal == 1){
      //  while (canal1->bestado){
        //for (cont = 0; cont < 3; cont ++){
              //fl_message("iniciar a muestrear");
              Encapsular('L', 'p', '1', '0');                //Trama Osc14   
              Transmision();
              //fl_message("iniciar a muestrear");
              if (ch1_muestreado){
                // fl_message("pedir primer vector");
                 Encapsular('A', 'p', '1', '1');             //Trama Osc16 
                 Transmision();
                // fl_message("pedir segundo vector");
                 Encapsular('A', 'p', '1', '2');             //Trama Osc16
                 Transmision();
                // fl_message("pedir tercer vector");
                 Encapsular('A', 'p', '1', '3');             //Trama Osc16
                 Transmision();
                 //fl_message("pedir cuarto vector");
                 Encapsular('A', 'p', '1', '4');             //Trama Osc16
                 Transmision();
                 recorrer_datos(1);
              }
      //  }
     }
     if (num_canal == 2){
        while (canal2->bestado){
              Encapsular('L', 'p', '1', '0');
              Transmision();
              if (ch1_muestreado){
                 Encapsular('B', 'p', '1', '1');
                 Transmision();
                 Encapsular('B', 'p', '1', '2');
                 Transmision();
                 Encapsular('B', 'p', '1', '3');
                 Transmision();
                 Encapsular('B', 'p', '1', '4');
                 Transmision();
                 recorrer_datos(2);
              }
        }
     }
     if (num_canal == 3){
        while (canal2->bestado && canal1->bestado){
              Encapsular('L', 'p', '1', '0');
              Transmision();
              if (ch1_muestreado && ch2_muestreado){
                 Encapsular('A', 'p', '1', '1');
                 Transmision();
                 Encapsular('A', 'p', '1', '2');
                 Transmision();
                 Encapsular('A', 'p', '1', '3');
                 Transmision();
                 Encapsular('A', 'p', '1', '4');
                 Transmision();
                 Encapsular('B', 'p', '1', '1');
                 Transmision();
                 Encapsular('B', 'p', '1', '2');
                 Transmision();
                 Encapsular('B', 'p', '1', '3');
                 Transmision();
                 Encapsular('B', 'p', '1', '4');
                 Transmision();
                 recorrer_datos(3);
              }
        }
     }
}

/**
 * Rutina para solicitar una a una las muestras de las 
 * señales en el osciloscopio. 
*/
void Osciloscopio::muestreo_timer(){
        Fl::add_timeout(0.1, cb_timer_ch1, this);
}



/**
 * Este método es el callback del boton selector de acople
 * del canal del osciloscopio debe ir acompañada de una función 
 * inline para poder realizar los callbacks. 
*/
void Osciloscopio::cb_acople(Fl_Widget* pboton, void *pany)
{
     Osciloscopio* posc=(Osciloscopio*)pany;       
     posc->cb_acople_in();
}

/**
 * Esta función acompaña la función  cb_acople  
 * para realizar los llamados de callback del selector de acople
 * del canal en el osciloscopio 
*/
void Osciloscopio::cb_acople_in(){
  if (isec_acople==0){
     canal1->oacop_gnd->value(0);
     canal1->oacop_ac->value(1);
     }
     if (isec_acople==1){
     canal1->oacop_ac->value(0);
     canal1->oacop_dc->value(1);
     }
     if (isec_acople==2){
     canal1->oacop_dc->value(0);
     canal1->oacop_gnd->value(1);
     isec_acople=-1;
     }
     isec_acople++;  
}



/**
 * Callbacks para modificar el menu de tiempos por division de acuerdo a como 
 * se modifique la perilla selectora de tiempos por division en el osciloscopio. 
*/

void Osciloscopio::cb_tdiv05s(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector);
}

void Osciloscopio::cb_tdiv05s_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}

void Osciloscopio::cb_tdiv02s(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector);
}

void Osciloscopio::cb_tdiv02s_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


void Osciloscopio::cb_tdiv01s(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector);
}

void Osciloscopio::cb_tdiv01s_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


void Osciloscopio::cb_tdiv50ms(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector);
}

void Osciloscopio::cb_tdiv50ms_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


void Osciloscopio::cb_tdiv20ms(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector);
}

void Osciloscopio::cb_tdiv20ms_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


void Osciloscopio::cb_tdiv10ms(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector);
}

void Osciloscopio::cb_tdiv10ms_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}

void Osciloscopio::cb_tdiv5ms(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector);
}

void Osciloscopio::cb_tdiv5ms_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


void Osciloscopio::cb_tdiv2ms(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector);
}

void Osciloscopio::cb_tdiv2ms_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


void Osciloscopio::cb_tdiv1ms(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector); 
}

void Osciloscopio::cb_tdiv1ms_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}



void Osciloscopio::cb_tdiv05ms(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector);
}

void Osciloscopio::cb_tdiv05ms_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}

void Osciloscopio::cb_tdiv02ms(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector);
}

void Osciloscopio::cb_tdiv02ms_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}



void Osciloscopio::cb_tdiv01ms(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector);
}

void Osciloscopio::cb_tdiv01ms_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


void Osciloscopio::cb_tdiv50us(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector);
}

void Osciloscopio::cb_tdiv50us_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


void Osciloscopio::cb_tdiv20us(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector); 
}

void Osciloscopio::cb_tdiv20us_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}

void Osciloscopio::cb_tdiv10us(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector);
}

void Osciloscopio::cb_tdiv10us_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}

void Osciloscopio::cb_tdiv5us(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector);
}

void Osciloscopio::cb_tdiv5us_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}


void Osciloscopio::cb_tdiv2us(Fl_Widget* psel, void *pany){
    Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector); 
}

void Osciloscopio::cb_tdiv2us_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}

void Osciloscopio::cb_tdiv1us(Fl_Widget* psel, void *pany){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tdiv05s_in(pselector);
}

void Osciloscopio::cb_tdiv1us_in(Fl_Widget* psel){
     Fl_Choice *pselector = (Fl_Choice *)psel;
     otiempo_div->value(pselector->value());
}

// Class automatically generated by Dev-C++ New Class wizard

#ifndef CANAL_H
#define CANAL_H

#include "instrumento.h"         // inheriting class's header file
#include <FL/Fl_Group.H>                   
#include "fl_Knob.h"
#include <FL/Fl_Choice.H>
#include <FL/Fl_Repeat_Button.H>
#include <Fl/fl_Light_Button.h>
#include <FL/Fl_Ask.H>
#include <FL/Fl_Box.H>


/*******************************************************************************
 * Canal: Representa las funcionalidades de los canales del osciloscopio.
 *        La clase permite configurar los siguientes parametros del canal:
 * Escala de Voltios por División: Se configura con una perilla selectora o un
 *                                 menú desplegable con 12 escalas.
 * Acople del canal: Se puede seleccionar el tipo de acople con el que recibe la 
 *                   señal: acople Ac, Dc y Gnd.
 * Posición Vertical de la señal: Se configura con una perilla la posición 
 *                                vertical donde se va a graficar la señal.  
*******************************************************************************/

class Canal : public Instrumento{
      
	public:
		// class constructor
		Canal(int x, int y, int w, int h, const char *l, int ncolo);
		// class destructor
		~Canal();
		// Selector de la escala de voltios por división.
		Fl_Knob *ovolt_div;
		//Selector del acople. 
		Fl_Repeat_Button *osel_acople;
		//Grupo de los diferentes botones y selectores que componen el canal.
		Fl_Group *ogroup_ch;
		//Grupo del selector de posicion de la grafica del canal.
		Fl_Group *ogroup_pos;
		// Grupo de los selectores de la escala de votios por division del canal.
		Fl_Group *ogroup_v_div;
		//Grupo de los selectores del tipo de acople del canal.
		Fl_Group *ogroup_acople;
		// Variable que representa el color de la gráfica de la señal adquirida por el canal.
		int ncolor;
		//Menu desplegable para seleccionar la escala de voltios por división del canal  
        Fl_Choice *omenu_v_div;
		// Indicador luminoso del estado activo el acople gnd del canal  
        Fl_Box *oacop_gnd;
		// Indicador luminoso del estado activo el acople ac del canal   
        Fl_Box *oacop_ac;
		// Indicador luminoso del estado activo el acople dc del canal   
        Fl_Box *oacop_dc;
        // Perilla para ajustar la posición vertical de la señal.   
        Fl_Knob *opos_x;
   private:
        // Calback para la escala de 5 voltios por división
		static void cb_vdiv5(Fl_Widget*, void *);
		inline void cb_vdiv5_in(Fl_Widget*);
		// Calback para la escala de 2 voltios por división
		static void cb_vdiv2(Fl_Widget*, void *);
		inline void cb_vdiv2_in(Fl_Widget*);
		//Calback para la escala de 1 voltio por división
		static void cb_vdiv1(Fl_Widget*, void *);
		inline void cb_vdiv1_in(Fl_Widget*);
		//Calback para la escala de 0.5 voltios por división
		static void cb_vdiv05(Fl_Widget*, void *);
		inline void cb_vdiv05_in(Fl_Widget*);
		//Calback para la escala de 0.2 voltios por división
		static void cb_vdiv02(Fl_Widget*, void *);
		inline void cb_vdiv02_in(Fl_Widget*);
		//Calback para la escala de 0.1 voltios por división
		static void cb_vdiv01(Fl_Widget*, void *);
		inline void cb_vdiv01_in(Fl_Widget*);
		// Calback para la escala de 50m voltios por división
		static void cb_vdiv50m(Fl_Widget*, void *);
		inline void cb_vdiv50m_in(Fl_Widget*);
		// Calback para la escala de 20m voltios por división
		static void cb_vdiv20m(Fl_Widget*, void *);
		inline void cb_vdiv20m_in(Fl_Widget*);
		//Calback para la escala de 10m voltios por división
		static void cb_vdiv10m(Fl_Widget*, void *);
		inline void cb_vdiv10m_in(Fl_Widget*);
		//Calback para la escala de 5m voltios por división
		static void cb_vdiv5m(Fl_Widget*, void *);
		inline void cb_vdiv5m_in(Fl_Widget*);
		// Calback para la escala de 2m voltios por división
		static void cb_vdiv2m(Fl_Widget*, void *);
		inline void cb_vdiv2m_in(Fl_Widget*);
		// Calback para la escala de 1m voltio por división
		static void cb_vdiv1m(Fl_Widget*, void *);
		inline void cb_vdiv1m_in(Fl_Widget*);

};

#endif // CANAL_H

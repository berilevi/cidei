// Class automatically generated by Dev-C++ New Class wizard
		
#ifndef INSTRUMENTO_H
#define INSTRUMENTO_H

#include <string.h>
#include <fstream>
#include <stdlib.h>
#include <FL/Fl_Ask.H>
#include <FL/Fl_Tooltip.H>

using namespace std;

#pragma hdrstop
#include <stdio.h>
#include <windows.h>
#include "_mpusbapi.h"         // Archivo de cabecera para el enlace con la DLL 
                               // que provee Microchip para la comunicacion USB          
//#pragma argsused*/

#define SIZE_DATA 150          // Maximo tamaño del vector recibido desde el hardawre 


/*******************************************************************************
*La clase Instrumento es la clase base para los cuatro instrumentos: Osciloscopio,
*Multímetro, Analizador Lógico y Generador de Señales, que conforman el LIV y 
*representa las caracteristicas generales que poseen. 
*******************************************************************************/

class Instrumento {
      
	public:
		// Constructor de Clase
		Instrumento();
		// Destructor de clase
		~Instrumento();
		//Almacena los identificadores de producto y vendedor del dispositivo USB
		char vid_pid[18];
		// Cadena con el número del endpoint de salida para la comunicación USB.
		char out_pipe[11];
	    //Cadena con el número del endpoint de entrada para la comunicación USB
        char in_pipe[11];
		//Apuntador al handle del endpoint pipe de salida para la comunicación USB
        HANDLE myOutPipe;
		//Apuntador al handle del endpoint pipe de entrada para la comunicación USB
        HANDLE myInPipe;
		//Buffer donde se encapsula los comandos enviados al hardware para la comunicación USB
        BYTE trama_control[9];
		//Buffer donde se almacena la información enviada desde el hardware
	    BYTE receive_buf[SIZE_DATA];
		//Variable que indica si el hardware ya completo de muestrear la señal del canal 1 del osciloscopio.
	    bool ch1_muestreado;
		//Variable que indica si el hardware ya completo de muestrear la señal del canal 2 del osciloscopio.
	    bool ch2_muestreado;
		//Buffer donde se almacenan los datos enviados por el hardware del canal 1 del osciloscopio.
	    int buf_osc_ch1[572];
		//Variable donde se almacena el dato muestreado uno a uno por el hardware del canal 1 del osciloscopio. 
	    int idato_osc_ch1;
		//Variable donde se almacena el dato muestreado uno a uno por el hardware del canal 2 del osciloscopio. 
	    int idato_osc_ch2;
		//Buffer donde se almacenan los datos enviados por el hardware del canal 2 del osciloscopio.
	    int buf_osc_ch2[572];
		//Buffer donde se almacena la información desencapsulada enviada por el hardware del Multímetro.
	    char buf_mult[4];
		//Buffer donde se almacena la información desencapsulada enviada por el hardware del Analizador Lógico.
	    char buf_analizador[3];
		//Valor de escala de la medicion realizada con el Multímetro. 
		int imult_escala;
		//Arreglo con los datos de las señales digitalizados por el hardware.
		/* TODO (JuanP#1#): Revizar por que al quitarla se daña el muestreo del 
                            analizador. */
		int idatos[572];                                
		//Variable que representa el estado activo o inactivo de los instrumentos.
		bool bestado;
		//La función archivar genera un archivo plano con los datos enviados por el hardware.
		void archivar(); 
        //La función Sethardware asigna el valor de la variable bhardware que indica el estado del hardware.
        void Sethardware(bool x); 
        //La función activar asigna el valor de la variable estado que indica si el instrumento está o no activo.
		void activar(bool bx); 
		//La función Transmision realiza la comunicación con el hardware a través de USB.
		void Transmision();
		//La función Encapsular organiza la trama que se envía al hardware a través de USB.
		void Encapsular(char, char, char, char, char,char);
		//La función Desencapsular organiza los datos enviados desde el hardware a los instrumentos de software a través de USB.
		void Desencapsular(BYTE []);
		
		//Esta variable representa el estado funcional del hardware del instrumento.
		bool bhardware;
		//Esta variable contiene el nombre del archivo de texto donde se almacenan los datos del instrumento.
		char cnombre [12];
};

#endif // INSTRUMENTO_H

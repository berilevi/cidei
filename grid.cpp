// Class automatically generated by Dev-C++ New Class wizard

#include "grid.h" // class's header file
#include <FL/Fl.H>
#include <FL/fl_draw.H>
#include <FL/Enumerations.H>

// class constructor
grid::grid(int X,int Y,int W,int H,const char *l): Fl_Scope(X,Y,W,H,l){
               
	x(X);y(Y);w(W);h(H);
    bgrid = 0; 
    bgrilla_analizador = 0;
    banalizador_on = 1;
    TraceColour(Fl_Color(27));
    
}


void grid::draw(){
 draw(x(),y(),w(),h());
}

void grid::draw(int xx, int yy, int ww, int hh){
    
   fl_push_clip(xx,yy,ww,hh); 
    
   fl_color(FL_WHITE);  
  // fl_lighter(FL_WHITE); 
   fl_line_style(FL_DOT);

if (bgrilla_analizador == 0 ){   
   if (bgrid){
      fl_color(Fl_Color(22));
      fl_line(xx, (hh/8)+yy, ww+xx, (hh/8)+yy);
      fl_line(xx, (hh/4)+yy, ww+xx, (hh/4)+yy);
      fl_line(xx, (hh/2.6667)+yy, ww+xx, (hh/2.6667)+yy);
      fl_line_style(0);
      fl_line(xx, (hh/2)+yy, ww+xx, (hh/2)+yy);
      fl_line_style(FL_DOT);
      fl_line(xx, (hh/1.6)+yy, ww+xx, (hh/1.6)+yy);
      fl_line(xx, (hh/1.3333)+yy, ww+xx, (hh/1.3333)+yy);
      fl_line(xx, (hh/1.142857)+yy, ww+xx, (hh/1.142857)+yy);
   
      fl_line((ww/10)+xx, yy, (ww/10)+xx, hh+yy);
      fl_line((ww/5)+xx, yy, (ww/5)+xx, hh+yy);
      fl_line((ww/3.3333)+xx, yy, (ww/3.333)+xx, hh+yy);
      fl_line((ww/2.5)+xx, yy, (ww/2.5)+xx, hh+yy);
      fl_line_style(0);
      fl_line((ww/2)+xx, yy, (ww/2)+xx, hh+yy);
      fl_line_style(FL_DOT);
      fl_line((ww/1.66667)+xx, yy, (ww/1.66667)+xx, hh+yy);
      fl_line((ww/1.42857)+xx, yy, (ww/1.42857)+xx, hh+yy);
      fl_line((ww/1.25)+xx, yy, (ww/1.25)+xx, hh+yy);
      fl_line((ww/1.1111)+xx, yy, (ww/1.1111)+xx, hh+yy);

   }
   
   else if (bgrid == 0 && banalizador_on == 0 ){
        fl_line_style(0);
        fl_line((ww/2)+12, yy, (ww/2)+12, hh+yy);
        fl_line(xx, (hh/2)+yy, ww+12, (hh/2)+yy);
   }
}
else {
     if (bgrid == 1){
      fl_color(_TraceColour);
      //fl_color(Fl_Color(22));          
     //fl_lighter(FL_WHITE);
     // fl_color(27);
      fl_line((ww/20)+xx, yy, (ww/20)+xx, hh+yy);
      fl_line((ww/10)+xx, yy, (ww/10)+xx, hh+yy);
      fl_line((ww/6.66667)+xx, yy, (ww/6.66667)+xx, hh+yy);
      fl_line((ww/5)+xx, yy, (ww/5)+xx, hh+yy);
      fl_line((ww/4)+xx, yy, (ww/4)+xx, hh+yy);
      fl_line((ww/3.3333)+xx, yy, (ww/3.333)+xx, hh+yy);
      fl_line((ww/2.85714)+xx, yy, (ww/2.85714)+xx, hh+yy);
      fl_line((ww/2.5)+xx, yy, (ww/2.5)+xx, hh+yy);
      fl_line((ww/2.2222)+xx, yy, (ww/2.2222)+xx, hh+yy);
      fl_line((ww/2)+xx, yy, (ww/2)+xx, hh+yy);
      fl_line((ww/1.81818)+xx, yy, (ww/1.81818)+xx, hh+yy);
      fl_line((ww/1.66667)+xx, yy, (ww/1.66667)+xx, hh+yy);
      fl_line((ww/1.538461)+xx, yy, (ww/1.538461)+xx, hh+yy);
      fl_line((ww/1.42857)+xx, yy, (ww/1.42857)+xx, hh+yy);
      fl_line((ww/1.3333)+xx, yy, (ww/1.3333)+xx, hh+yy);
      fl_line((ww/1.25)+xx, yy, (ww/1.25)+xx, hh+yy);
      fl_line((ww/1.17647)+xx, yy, (ww/1.17647)+xx, hh+yy);
      fl_line((ww/1.1111)+xx, yy, (ww/1.1111)+xx, hh+yy);
      fl_line((ww/1.0526316)+xx, yy, (ww/1.0526316)+xx, hh+yy);
      }
      
}
     
   fl_pop_clip();      
        
}

// class destructor
grid::~grid()
{
	// insert your code here
}

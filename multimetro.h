// Class automatically generated by Dev-C++ New Class wizard

#ifndef MULTIMETRO_H
#define MULTIMETRO_H

#include "instrumento.h" // inheriting class's header file
#include "Fl_7Seg.H"     // inheriting class's header file
//#include "SevenSegment.h"
#include <FL/Fl.H>
#include <FL/Fl_Group.H>
#include <Fl/fl_Light_Button.h>
#include <FL/Fl_Repeat_Button.H>
#include <FL/Fl_Help_Dialog.h>
#include <FL/Fl_Box.H>
#include <FL/fl_ask.H>
#include <FL/Fl_Check_Button.H>
#include <iostream>
#include <string>

#include <windows.h> 


#define FACTOR_VDC_1 2560
#define FACTOR_VDC_2 256
#define FACTOR_VDC_3 25,6
#define FACTOR_VDC_4 2,56
#define FACTOR_VDC_5 0,256


using namespace std;

/*******************************************************************************
 * Multímetro: Clase que representa las funciones del instrumento multímetro con
 *             6 tipos de medición:
 * Voltímetro AC: Mide la magnitud de voltaje True RMS de una señal alterna.
 * Voltímetro DC: Mide la magnitud de voltaje de una señal continua.
 * Amperímetro AC: Mide la magnitud de corriente de una señal alterna.
 * Amperímetro DC: Mide la magnitud de corriente de una señal continua. 
 * Resistencia: Mide la magnitud de resistencia eléctrica.
 * Continuidad: Reviza la continuidad eléctrica.             
*******************************************************************************/
class Multimetro : public Instrumento
{
	public:
        // Variable enumerada con los 6 instrumentos que hacen parte del multñimetro   
        enum inst {
             volt_ac,
             volt_dc,
             amp_ac, 
             amp_dc,
             ohm,
             continuidad
        };   
		//Ventana de ayuda de uso del instrumento.
        Fl_Help_Dialog *manualMult;      
		//Variable que almacena el valor entero de la medicion realizada con el hardware  
		long int ivalor_conversion;
		//Variable que almacena el valor ye escalado que se presentará al usuario.
        double fvalor_escalado;
		//Variable representa el valor de la medición realizada con algun instrumento del multímetro
		char cvalor[7];
		//Display del multímetro donde el usuario observa el resultado de la medición.
		Fl_7Seg *odisp_mult;
		// Método para colocar el valor de la medición en el display.
		void set_disp_mult(char [4]);
		//Agrupa los botones e indicadores del multímetro.
	    Fl_Group *ogroup_mult;
		// class constructor
		Multimetro();
		// class destructor
		~Multimetro();
		//Callback del botón de encendido / apagado del multímetro.
		static void cb_mult_on(Fl_Widget*, void *);
		inline void cb_mult_on_in();
		
private:
        //Callback del timer para realizar la solicitud de datos del multímetro al hardware.    
         static void cb_timer_mult(void *);
         inline void cb_timer_mult_in();
         //Callback del botón que activa la ayuda del instrumento. 
         static void cb_help(Fl_Widget*, void *);
         inline void cb_help_in();
         //Callback del botón que activa la ayuda flotante de los botones del instrumento. 
         static void cb_ayuda(Fl_Widget*, void *);
         inline void cb_ayuda_in();
         //Envia la información al hardware para configurar cada instrumento del multimetro.
         void config_instrumento(int);
         //Calcula el valor de la medición en el rango de escala en que se encuentre.
         void escalar_valor(int);
		//Varaible que representa los instrumentos que contiene el multímetro.
		inst instrument;
		// Boton que habilita la ayuda para el uso del instrumento.
        Fl_Button *ohelp_mult;
        //Botón que habilita la ayuda flotante para el uso de los botones del instrumento. 
        Fl_Check_Button *oayudaMult;
		//Botón de activación del medidor de voltaje en ac.
		Fl_Button *ovolt_ac;
		//Botón de activación del medidor de voltaje en dc.
	    Fl_Button *ovolt_dc;
	    //Botón de activación del medidor de corriente en ac.
	    Fl_Button *oamp_ac;
	    //Botón de activación del medidor de corriente en dc.
	    Fl_Button *oamp_dc;
	    //Botón de activación del medidor de resistencia.
	    Fl_Button *oohm;
	    //Botón de activación del medidor de continuidad.
	    Fl_Button *ocontinuidad;
	    //Callback del botón que activa el medidor de voltaje en ac.
        static void cb_volt_ac(Fl_Widget*, void *);
        inline void cb_volt_ac_in();
        //Callback del botón que activa el medidor de voltaje en dc.   
        static void cb_volt_dc(Fl_Widget*, void *);
        inline void cb_volt_dc_in();
        //Callback del botón que activa el medidor de corriente en ac.   
        static void cb_amp_ac(Fl_Widget*, void *);
        inline void cb_amp_ac_in();
        //Callback del botón que activa el medidor de corriente en dc.   
        static void cb_amp_dc(Fl_Widget*, void *);
        inline void cb_amp_dc_in();
        //Callback del botón que activa el medidor de resistencia   
        static void cb_ohm(Fl_Widget*, void *);
        inline void cb_ohm_in();
        //Callback del botón que activa el medidor de continuidad    
        static void cb_cont(Fl_Widget*, void *);
        inline void cb_cont_in();
	    //Boton para encender el instrumento multimetro.
        Fl_Light_Button *omult_on;
        // Widget para colocar en texto las unidades de medida de la medición realizada con el multímetro.
        Fl_Box *ounidades;
};

#endif // MULTIMETRO_H

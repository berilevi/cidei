// Class automatically generated by Dev-C++ New Class wizard

#include "instrumento.h" // class's header file
#include <stdio.h>
#include <FL/Fl_Ask.H>

// class constructor
Instrumento::Instrumento()
{
    int icont;
    inum_datos=0;
    strcpy(vid_pid, "vid_04d8&pid_000a");       // Product & Vendor ID
    strcpy(out_pipe, "\\MCHP_EP3");             // End Point de salida 
    strcpy(in_pipe, "\\MCHP_EP3");              // End Point de salida
    trama_control[0] = 0x01;                    // Valor de inicio de trama
    trama_control[1] = 0x11;                    // Tipo de trama de control
    trama_control[7] = 0x04;                    // Final de trama del protocolo
    trama_control[8] = 0x00;                    // Fin de cadena que se va a transmitir
}

// class destructor
Instrumento::~Instrumento()
{
	// insert your code here
}


// sets the value of estado
void Instrumento::activar(bool bx)
{
	bestado = bx;
}

// sets the value of hardware
void Instrumento::Sethardware(bool x)
{
	bhardware = x;
}

// sets the value of archivo
void Instrumento::Setarchivo(bool x)
{
	barchivo = x;
}

// sets the value of num_datos
void Instrumento::Setnum_datos(int x)
{
	inum_datos = x;
}

/*
 * Esta función almacena los datos enviados por el hardware
 * del instrumento en el arreglo datos.
 */
void Instrumento::almacenar(int itamano, char cdato [])
{
     int ii;
     if (inum_datos >= 379) {              // Almacenar datos para pantalla y media del osciloscopio
        inum_datos = 0;
     }
     for (ii=0;ii < itamano-1; ii++){   
         idatos[ii+inum_datos] = int(cdato[ii]);
         //itiempo[ii+inum_datos]=ii+inum_datos;
      }   
     inum_datos = inum_datos+(itamano-1);  
}

/*
 * Esta función genera un archivo plano con los datos 
 * enviados por el hardware del instrumento.
 */
void Instrumento::archivar()
{
     FILE * log;
     log = fopen(cnombre,"w");
     if (log != NULL) {
             fwrite(idatos,1,inum_datos,log);
     }
     else {
          fl_alert("No se pudo abrir el archivo");     
     }          
}

/**
 * La función Transmision realiza la comunicación
 * con el hardware a través de USB.
*/

void Instrumento::Transmision(){
   
   int icont;
   
   if (bestado){

    DWORD selection;
    fflush(stdin);
    selection = 0;

    myOutPipe = MPUSBOpen(selection,vid_pid,out_pipe,MP_WRITE,0);
    myInPipe = MPUSBOpen(selection,vid_pid,out_pipe,MP_READ,0);
    if(myOutPipe == INVALID_HANDLE_VALUE || myInPipe == INVALID_HANDLE_VALUE)
    {
        fl_message("Failed to open data pipes.");
        return;
    }

    DWORD RecvLength=100;
    DWORD SentDataLength;
     
    
    MPUSBWrite(myOutPipe,trama_control,10,&SentDataLength,10);
      
    MPUSBRead(myInPipe,receive_buf,110,&RecvLength,10);
    
    itamano_trama = int(receive_buf [4]);


    for (icont=5;icont<(itamano_trama+4);icont++){
        receive_buf2[icont-5]=receive_buf[icont]; 
    }
               
    MPUSBClose(myOutPipe);
    MPUSBClose(myInPipe);
    myOutPipe = myInPipe = INVALID_HANDLE_VALUE;    
    
    }
    else {
    MPUSBClose(myOutPipe);
    MPUSBClose(myInPipe);
    myOutPipe = myInPipe = INVALID_HANDLE_VALUE;    
}
}

/*
 * La función Encapsular organiza la trama que se envía
 * al hardware a través de USB.
*/
void Instrumento::Encapsular(char cnom, char coper, char cgetset, char clong, char cdato)
{
     int icont;
     trama_control[2] = cnom;
     trama_control[3] = coper;
     trama_control[4] = cgetset;
     trama_control[5] = clong;
    // for (icont= 6; icont<= strlen(cdato);icont++){
     trama_control[6] = cdato;
    // }
}


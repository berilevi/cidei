// Class automatically generated by Dev-C++ New Class wizard

#include "instrumento.h"  // Archivo de cabecera de clase
#include <stdio.h>
#include <FL/Fl_Ask.H>

// Constructor de la clase
Instrumento::Instrumento()
{

    inum_datos=0;
    strcpy(vid_pid, "vid_04d8&pid_000a");       // Product & Vendor ID
    strcpy(out_pipe, "\\MCHP_EP3");             // End Point de salida 
    strcpy(in_pipe, "\\MCHP_EP3");              // End Point de salida
    trama_control[0] = 0x01;                    // Valor de inicio de trama
    trama_control[5] = 0x04;                    // Final de trama del protocolo
    trama_control[6] = 0x00;                    // Fin de cadena que se va a transmitir
    strcpy(buf_mult,"0000");                    // Inicializar el bufer del multimetro.
}

// Destructor de clase
Instrumento::~Instrumento()
{
	// insert your code here
}


void Instrumento::activar(bool bx)
{
	bestado = bx;
}


void Instrumento::Sethardware(bool x)
{
	bhardware = x;
}


void Instrumento::Setarchivo(bool x)
{
	barchivo = x;
}


void Instrumento::Setnum_datos(int x)
{
	inum_datos = x;
}

/*
 * Esta función almacena los datos enviados por el hardware
 * del instrumento en el arreglo datos.
 */
void Instrumento::almacenar(int itamano, char cdato [])
{
     int ii;
     if (inum_datos >= DATA_OSC-1) {              // Almacenar datos para graficar maximo pantalla y media del osciloscopio
        inum_datos = 0;
     }
     for (ii=0;ii < itamano-1; ii++){   
         idatos[ii+inum_datos] = int(cdato[ii]);
     }   
     inum_datos = inum_datos+(itamano-1);  
}

/*
 * Esta función genera un archivo plano con los datos 
 * enviados por el hardware del instrumento.
 */
void Instrumento::archivar()
{
     FILE * log;
     log = fopen(cnombre,"w+");
     if (log != NULL) {
        fwrite(idatos,sizeof(int),inum_datos,log);
     }
     else {
          fl_alert("No se pudo abrir el archivo");     
     }          
}

/**
 * La función Transmision realiza la comunicación con el hardware a través de USB.
*/

void Instrumento::Transmision(){
   
   if (bestado){                     //Se ejecuta si el instrumento esta activo

      DWORD selection;               //Pipe para la transmision 
      fflush(stdin);
      selection = 0;

      myOutPipe = MPUSBOpen(selection,vid_pid,out_pipe,MP_WRITE,0);
      myInPipe = MPUSBOpen(selection,vid_pid,out_pipe,MP_READ,0);
      if(myOutPipe == INVALID_HANDLE_VALUE || myInPipe == INVALID_HANDLE_VALUE)
      {
        fl_message("Failed to open data pipes.");
        return;
      }

      DWORD RecvLength=150;        
      DWORD SentDataLength;
    
      MPUSBWrite(myOutPipe,trama_control,10,&SentDataLength,10);
      
      MPUSBRead(myInPipe,receive_buf,150,&RecvLength,10);
    
      Desencapsular(receive_buf);
             
      MPUSBClose(myOutPipe);
      MPUSBClose(myInPipe);
      myOutPipe = myInPipe = INVALID_HANDLE_VALUE;    
    
   }
   else {
        MPUSBClose(myOutPipe);
        MPUSBClose(myInPipe);
        myOutPipe = myInPipe = INVALID_HANDLE_VALUE;    
   }
}

/*
 * La función Encapsular organiza la trama que se envía
 * al hardware a través de USB.
*/
void Instrumento::Encapsular(char cnom, char coper, char clong, char cdato)
{
     trama_control[1] = cnom;
     trama_control[2] = coper;
     trama_control[3] = clong;
     trama_control[4] = cdato;
}

/*
 * La función GuardarBit guarda el bit como caracter en los
 * respectivos bufferes correspondientes a los canales del analizador
 * lógico.
*/
void Instrumento::GuardarBit(int canal[], int posicion, bool bit)
{   
    if(bit == true) {
        canal[posicion] = 1;
    }
    else {
        canal[posicion] = 0;
    }
}

/**
 * La función Desencapsular organiza los datos enviados desde el hardware
 * a los instrumentos de software a través de USB.
*/
void Instrumento::Desencapsular(char recibida [])
{
     int icont;
     int itamano;
     itamano = int (recibida [3]);            //Tamano de la informacion enviada
     switch (recibida [1]){
            case 'A':                         //Osciloscopio canal 1
                 switch (recibida [2]){
                        case '1':             //Primer vector de datos 
                             for (icont = 4; icont < (itamano+4); icont++){
                                 buf_osc_ch1[icont-4]=recibida[icont];
                             }
                        case '2':             //Segundo vector de datos                                 
                             for (icont = 4; icont < (itamano+4); icont++){
                                 buf_osc_ch1[(icont-4)+143]=recibida[icont];
                             }
                        case '3':             //Tercer vector de datos
                             for (icont = 4; icont < (itamano+4); icont++){
                                 buf_osc_ch1[(icont-4)+286]=recibida[icont];
                             }
                        case '4':             //Cuarto vector de datos
                             for (icont = 4; icont < (itamano+4); icont++){
                                 buf_osc_ch1[(icont-4)+429]=recibida[icont];
                             }                    
                 }
            case 'B':                         //Osciloscopio canal 2
                 switch (recibida [2]){
                        case '1':             //Primer vetor de datos
                             for (icont = 4; icont < (itamano+4); icont++){
                                 buf_osc_ch2[icont-4]=recibida[icont];
                             }
                        case '2':             //Segundo vector de datos
                             for (icont = 4; icont < (itamano+4); icont++){
                                 buf_osc_ch2[(icont-4)+143]=recibida[icont];
                             }
                        case '3':             //Tercer vector de datos
                             for (icont = 4; icont < (itamano+4); icont++){
                                 buf_osc_ch2[(icont-4)+286]=recibida[icont];
                             }
                        case '4':             //Cuarto vector de datos
                             for (icont = 4; icont < (itamano+4); icont++){
                                 buf_osc_ch2[(icont-4)+429]=recibida[icont];
                             }                    
                 }
            case 'C':                         //Analizador lógico
                 /* TODO (JPP#1#): revizar lo que hizo ricardo para el analizador */
            case 'D':                         //Voltimetro AC
                 strcpy(buf_mult,"0000");
                 for (icont=4;icont<(itamano+4);icont++){
                     buf_mult[icont-4]=receive_buf[icont];
                 }
                 if (itamano < 4){
                    buf_mult[itamano] = 0x00;
                 }
            case 'E':                         //Voltimetro DC
                 strcpy(buf_mult,"0000");
                 for (icont=4;icont<(itamano+4);icont++){
                     buf_mult[icont-4]=receive_buf[icont];
                 }
                 if (itamano < 4){
                    buf_mult[itamano] = 0x00;
                 }
            case 'F':                        //Amperimetro AC
                 strcpy(buf_mult,"0000");
                 for (icont=4;icont<(itamano+4);icont++){
                     buf_mult[icont-4]=receive_buf[icont];
                 }
                 if (itamano < 4){
                    buf_mult[itamano] = 0x00;
                 }
            case 'G':                        //Amperimetro DC
                 strcpy(buf_mult,"0000");
                 for (icont=4;icont<(itamano+4);icont++){
                     buf_mult[icont-4]=receive_buf[icont];
                 }
                 if (itamano < 4){
                    buf_mult[itamano] = 0x00;
                 }
            case 'H':                        //Ometro
                 strcpy(buf_mult,"0000");
                 for (icont=4;icont<(itamano+4);icont++){
                     buf_mult[icont-4]=receive_buf[icont];
                 }
                 if (itamano < 4){
                    buf_mult[itamano] = 0x00;
                 }
            case 'I':                        //Generador de señales
            
            case 'J':                                    //Pruebas de conectividad de LIV
                 if (recibida [2]== 0x06){               //ACK
                    Sethardware(true);
                 }
                 else if (recibida [2] == 0x15){         //NACK
                      fl_message("Error de Hardware");
                      Sethardware(0);
                 }
            case 'K':                        //Multimetro
                 
            case 'L':                        //Osciloscopio
                 
     ;}
}



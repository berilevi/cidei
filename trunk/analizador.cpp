// Class automatically generated by Dev-C++ New Class wizard

#include "analizador.h" // class's header file

//int isec_mult;

// class constructor
Analizador::Analizador()
{
                
    Fl_Light_Button *omult_on;
    Fl_Repeat_Button *oSel_mult;
    
    //isec_mult=0;
    
    strcpy(cvalor,"0.000");
    
    ogroup_mult = new Fl_Group (5,370,600,300,"");
    ogroup_mult->box(FL_ENGRAVED_FRAME);
    ogroup_mult->deactivate();
    
    apantalla = new Fl_Scope(8,375,380, 290,"");  // Instancia de scope
    apantalla->TraceColour(FL_WHITE);
    apantalla->tracetype(FL_SCOPE_TRACE_LOOP);
    apantalla->redrawmode(FL_SCOPE_REDRAW_FULL);
    apantalla->linetype(FL_SCOPE_LINE);  
    
    ogroup_mult-> end();
     
    omult_on->callback(cb_mult_on, this);
}

// class destructor
Analizador::~Analizador()
{
	// insert your code here
}

/*
 * Este método es el callback del boton selector de instrumentos
 * en el multímetro
 */
void Analizador::cb_sel_instrumento(Fl_Widget* pboton, void *any)
{
     Analizador* pmult=(Analizador*)any;
     pmult->cb_sel_instrumento_in();
}

/**
* Esta función acompaña la función  cb_sel_instrumento 
* para realizar los llamados de callback del selector de instrumento
* en el multimetro 
*/
void Analizador::cb_sel_instrumento_in(){

}

/*
 * Este método es el callback del boton selector de instrumentos
 * en el multímetro
 */
void Analizador::cb_mult_on(Fl_Widget* pboton, void *any)
{
     Analizador* pmult=(Analizador*)any;
     pmult->cb_mult_on_in();
}

/**
* Esta función acompaña la función  cb_sel_instrumento 
* para realizar los llamados de callback del selector de instrumento
* en el multimetro 
*/
void Analizador::cb_mult_on_in(){
     
}

/**
* Este método coloca el valor de la medición en el display
* del multímetro.
*/
void Analizador::set_disp_mult(char svalor [4 ]){
     odisp_mult->value(svalor);      
}

/**
 * Este método es el callback del timer para realizar la solicitud 
 * de datos del canal 1 del osciloscopio al hardware.  
*/
void Analizador::cb_timer_mult(void *pany)
{
     Analizador* pmult=(Analizador*)pany;
     pmult->cb_timer_mult_in();
}

/**
 * Esta función acompaña la función cb_timer_ch1
 * para realizar los llamados de callback del timer 
*/
void Analizador::cb_timer_mult_in(){

     Encapsular('D','P',0x3F,'1','0');
     Transmision();
     set_disp_mult((receive_buf_mult));
     Fl::repeat_timeout(0.3, cb_timer_mult, this);
}

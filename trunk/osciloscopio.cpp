// Class automatically generated by Dev-C++ New Class wizard

#include "osciloscopio.h" // class's header file
#include <FL/Fl.H>

int isec_ch;              // Variable global para realizar la secuencia de la selección de canales 
int isec_dual;            // Variable global para realizar la secuencia del menu dual 
int isec_trigger;         // Variable global para realizar la secuencia del menu dual 


// class destructor
Osciloscopio::~Osciloscopio()
{
	// insert your code here
}


// sets the value of bsuma
void Osciloscopio::Setbsuma(bool bx)
{
	bsuma = bx;
}


// sets the value of bx_y
void Osciloscopio::Setbx_y(bool bx)
{
	bx_y = bx;
}


// sets the value of ipos_x
void Osciloscopio::Setipos_x(int ix)
{
	ipos_x = ix;
}


// sets the value of it_div
void Osciloscopio::Setit_div(int ix)
{
	it_div = ix;
}


// sets the value of ifrec_muestreo
void Osciloscopio::Setifrec_muestreo(int ix)
{
	ifrec_muestreo = ix;
}


// sets the value of nnivel_trigger
void Osciloscopio::Setinivel_trigger(int ix)
{
	inivel_trigger = ix;
}

// sets the value of bdual
void Osciloscopio::Setbdual(bool bx)
{
	bdual = bx;
}


/*
 * Método para realizar la gráfica de la pantalla y la 
 * cuadricula del osciloscopio
 */
void Osciloscopio::draw()
{

}

/*
 * Método para sumar las señales adquiridas por los 2 canales
 * del instrumento.
 */
void Osciloscopio::sumar(int idato1[], int idato2[])
{
     int icont1;
     for (icont1=0; icont1 < inum_datos; icont1++){
         idatos[icont1] = idato1[icont1]+idato2[icont1]; // Suma de las dos señales para el eje y
         itiempo[icont1] = icont1;                       //Llenar el vector con valores para el eje x
     }
}

/*
 * Método para restar las señales adquiridas por los 2 canales
 * del instrumento 
 */
void Osciloscopio::restar(int idato1[], int idato2[])
{
     int icont1;
     for (icont1=0; icont1 < inum_datos; icont1++){
         idatos[icont1] = idato1[icont1] - idato2[icont1];    //Diferencia de las dos señales para el eje y
         itiempo[icont1] = icont1;                            //Llenar el vector con valores para el eje x
     }
}

/*
 * Método para realizar gráficas de lissajous con las señales 
 * de los 2 canales.
 */
void Osciloscopio::lissajous(int idato1[], int idato2[])
{
     int icont1;
     for (icont1=0; icont1 < inum_datos; icont1++){
         idatos[icont1] = idato1[icont1];                     //Datos del canal 1 para el eje y
         itiempo[icont1] = idato2[icont1];                    //Datos del canal 2 para el eje x 
     }
}

/*
 * Este método es el callback del boton selector de canales
 * en el osciloscopio
 */
void Osciloscopio::cb_sel_ch(Fl_Widget* pboton, void *pany)
{
     Osciloscopio* posc=(Osciloscopio*)pany;       //
     posc->cb_sel_ch_in();
}

/**
* Esta función acompaña la función  cb_sel_ch 
* para realizar los llamados de callback del selector de canales
* en el osciloscopio 
*/
void Osciloscopio::cb_sel_ch_in(){
     int ihilo_status;
     if (isec_ch==0){
     och2->value(0);
     Fl::remove_timeout(cb_timer_ch2, this);
     canal2->ogroup_ch->deactivate();
     odual_menu->deactivate();
     och1->value(1);
     canal1->activar(1);
     canal1->ogroup_ch->activate();
     Fl::add_timeout(0.5, cb_timer_ch1, this);
     }
     if (isec_ch==1){
     och1->value(0);
     canal1->activar(0);
     canal1->ogroup_ch->deactivate();
     Fl::remove_timeout(cb_timer_ch1, this);
     och2->value(1);
     canal2->activar(1);
     canal2->ogroup_ch->activate();
     Fl::add_timeout(0.2, cb_timer_ch2, this);
     }
     if (isec_ch==2){
     Fl::remove_timeout(cb_timer_ch2, this);
     Fl::remove_timeout(cb_timer_ch1, this);
     och1->value(1);
     canal1->activar(1);
     canal1->ogroup_ch->activate();
     Fl::add_timeout(0.5, cb_timer_dual_ch, this);
     odual_menu->activate();
     isec_ch=-1;
     }
     isec_ch++;
}

/**
 * Este método es el callback del boton del menu de las funciones
 * duales de graficas en el osciloscopio, debe ir acompañada de una 
 * función inline para poder realizar los callbacks. 
*/
void Osciloscopio::cb_dual_menu(Fl_Widget* pboton, void *pany)
{
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_dual_menu_in();
}

/**
 * Esta función acompaña la función  cb_menu_dual 
 * para realizar los llamados de callback del menu de funciones duales
 * de graficas en el osciloscopio 
*/
void Osciloscopio::cb_dual_menu_in(){
     if (isec_dual==0){
     ox_y->value(0);
     osuma->value(1);
     }
     if (isec_dual==1){
     osuma->value(0);
     oresta->value(1);
     }
     if (isec_dual==2){
     oresta->value(0);
     ox_y->value(1);
     isec_dual=-1;
     }
     isec_dual++;
}

/**
 * Este método es el callback del boton selector de la fuente del 
 * disparo (trigger) en el osciloscopio, debe ir acompañada de una 
 * función inline para poder realizar los callbacks.  
*/
void Osciloscopio::cb_sel_trigger(Fl_Widget* pboton, void *pany)
{
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_sel_trigger_in();
}

/**
 * Esta función acompaña la función  cb_sel_trigger para realizar 
 * los llamados de callback del boton selector de la fuente del
 * trigger en el osciloscopio 
*/
void Osciloscopio::cb_sel_trigger_in(){
     if (isec_trigger==0){
     otrigger_ch2->value(0);
     otrigger_ch1->value(1);
     }
     if (isec_trigger==1){
     otrigger_ch1->value(0);
     otrigger_ch2->value(1);
     isec_trigger=-1;
     }
     isec_trigger++;
}

/**
 * Este método es el callback del boton selector de la escala de 
 * tiempo por división en el osciloscopio, debe ir acompañada de una 
 * función inline para poder realizar los callbacks.  
*/
void Osciloscopio::cb_tiempo_div(Fl_Widget* psel, void *pany)
{
     Fl_Knob *pselector = (Fl_Knob *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_tiempo_div_in(pselector);
}

/**
 * Esta función acompaña la función  cb_tiempo_div 
 * para realizar los llamados de callback del boton selector de la
 * escala de tiempo por división en el osciloscopio 
*/
void Osciloscopio::cb_tiempo_div_in(Fl_Widget* psel){
     Fl_Knob *pselector = (Fl_Knob *)psel;
     pselector->value(floor(pselector->value()));
     omenu_t_div->value(pselector->value());
}

/**
 * Este método es el callback del boton selector de la posición 
 * de la señal respecto al eje y en el osciloscopio, debe ir acompañada 
 * de una función inline para poder realizar los callbacks.  
*/
void Osciloscopio::cb_pos_y(Fl_Widget* psel, void *pany)
{
     Fl_Knob *pselector = (Fl_Knob *)psel;
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_pos_y_in(pselector);
}

/**
 * Esta función acompaña la función  cb_pos_y 
 * para realizar los llamados de callback del boton selector de la
 * posición de la señal respecto al eje y en el osciloscopio 
*/
void Osciloscopio::cb_pos_y_in(Fl_Widget* psel){
     Fl_Knob *pselector = (Fl_Knob *)psel;
     pselector->value(floor(pselector->value()));
     ov_posx->value(pselector->value());
}

/**
 * Este método es el callback del timer para realizar la solicitud 
 * de datos del canal 1 del osciloscopio al hardware.  
*/
void Osciloscopio::cb_timer_ch1(void *pany)
{
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_timer_ch1_in();
}

/**
 * Esta función acompaña la función cb_timer_ch1
 * para realizar los llamados de callback del timer 
*/
void Osciloscopio::cb_timer_ch1_in(){
     canal1->Encapsular('A','P',0x3F,'0','0');
     canal1->Transmision();
     canal1->almacenar(canal1->itamano_trama,canal1->receive_buf2);
     recorrer_datos();
     Fl::repeat_timeout(0.1, cb_timer_ch1, this);
}


/**
 * Este método es el callback del timer para realizar la solicitud 
 * de datos del canal 2 del osciloscopio al hardware.  
*/
void Osciloscopio::cb_timer_ch2(void *pany)
{
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_timer_ch2_in();
}

/**
 * Esta función acompaña la función cb_timer_ch2
 * para realizar los llamados de callback del timer 
*/
void Osciloscopio::cb_timer_ch2_in(){
     canal2->Encapsular('A','P',0x3F,'0','0');
     canal2->Transmision();
     canal2->almacenar(canal2->itamano_trama,canal2->receive_buf2);
     recorrer_datos();
     Fl::repeat_timeout(0.1, cb_timer_ch2, this);
}


/**
 * Este método es el callback del timer para realizar la solicitud 
 * de datos de los 2 canales del osciloscopio simultaneamente al hardware.  
*/
void Osciloscopio::cb_timer_dual_ch(void *pany)
{
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_timer_dual_ch_in();
}

/**
 * Esta función acompaña la función cb_timer_dual_ch
 * para realizar los llamados de callback del timer 
*/
void Osciloscopio::cb_timer_dual_ch_in(){
     canal1->Encapsular('A','P',0x3F,'0','0');
     canal1->Transmision();
     canal1->almacenar(canal1->itamano_trama,canal1->receive_buf2);
     canal2->Encapsular('A','P',0x3F,'0','0');
     canal2->Transmision();
     canal2->almacenar(canal2->itamano_trama,canal2->receive_buf2);
     recorrer_datos();
     Fl::repeat_timeout(0.01, cb_timer_dual_ch, this);
}

/**
 * La función recorrer_datos recorre el arreglo idatos y envia punto 
 * por punto los datos para graficar.
*/
void Osciloscopio::recorrer_datos()
{
     int icont;
     
     if (canal1->bestado && ~canal2->bestado){
        opantalla->TraceColour(Fl_Color(canal1->ncolor));
        for(icont=0;icont < canal1->inum_datos-1; icont++){
            idato_graf_ch1 = canal1->idatos[icont];
            if (idato_graf_ch1 == 0){
               opantalla->Add(560+ canal1->npos_y);
            }
            else {
                opantalla->Add(canal1->npos_y + (560*(idato_graf_ch1)*canal1->nv_div));
            }              
        }                   
     }
     
     if (canal2->bestado && ~canal1->bestado){
        opantalla->TraceColour(Fl_Color(canal2->ncolor));
        for(icont=0;icont < canal2->inum_datos-1; icont++){
            idato_graf_ch2 = canal2->idatos[icont];
            if (idato_graf_ch2 == 0){
               opantalla->Add(560+ canal2->npos_y);
            }
            else {
                 opantalla->Add(canal2->npos_y + (560*(idato_graf_ch2)*canal2->nv_div));
            }              
        }                   
     }
     
     if (canal2->bestado && canal1->bestado){
        for(icont=0;icont < canal2->inum_datos-1; icont++){
            idato_graf_ch1 = canal1->idatos[icont];
            idato_graf_ch2 = canal2->idatos[icont];
            if (idato_graf_ch2 == 0 || idato_graf_ch1 == 0){
               opantalla->Add((560 + canal1->npos_y), (560 + canal2->npos_y));
            }
            else {
                 opantalla->NumDatos = canal1->inum_datos -1;
                 opantalla->Add(canal1->npos_y + (560*(idato_graf_ch1)*canal1->nv_div),
                 canal2->npos_y + (560*(idato_graf_ch2)*canal2->nv_div));
            }              
        }                   
     }
}


/**
 * Este método es el callback del hilo de ejecución del canal 
 * del osciloscopio.  
*/
void *Osciloscopio::cb_hilo(void *pany)
{
     Osciloscopio* posc=(Osciloscopio*)pany;
     posc->cb_hilo_in();
     return NULL;
}

/**
 * Esta función acompaña la función cb_hilo
 * para realizar los llamados de callback del hilo 
*/
void Osciloscopio::cb_hilo_in(){
    // Fl::add_timeout(0.5, cb_timer, this);
}

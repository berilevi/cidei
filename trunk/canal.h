//Class automatically generated by Dev-C++ New Class wizard

#ifndef CANAL_H
#define CANAL_H

#include "instrumento.h"                        //inheriting class's header file
#include <FL/Fl_Group.H>                   
#include "fl_Knob.h"
#include <FL/Fl_Dial.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Repeat_Button.H>
#include <Fl/fl_Light_Button.h>
#include <FL/Fl_Ask.H>
#include <FL/Fl_Box.H>

#include <FL/Fl_Shared_Image.H>
#include <FL/Fl_PNG_Image.H>
#include <FL/Fl_Box.H>


/*******************************************************************************
 * Canal: Representa las funcionalidades de los canales del osciloscopio.
 *        La clase permite configurar los siguientes parametros del canal:
 * Escala de Voltios por División: Se configura con una perilla selectora o un
 *                                 menú desplegable con 12 escalas.
 * Acople del canal: Se puede seleccionar el tipo de acople con el que recibe la 
 *                   señal: acople Ac, Dc y Gnd.
 * Posición Vertical de la señal: Se configura con una perilla la posición 
 *                                vertical donde se va a graficar la señal.  
*******************************************************************************/

class Canal : public Instrumento{
      
	public:
		// class constructor
		Canal(int x, int y, int w, int h, const char *l, int ncolo);
		// class destructor
		~Canal();
		// Selector de la escala de voltios por división.
		//Fl_Knob *ovoltDiv;
		Fl_Dial *ovoltDiv;
		//Selector del acople.
		Fl_Repeat_Button *oselAcople;
		//Grupo de los diferentes botones y selectores que componen el canal.
		Fl_Group *ogroupCh;
		//Box para colocar la mascara del canal.
	    Fl_Box *boxCanal;
	    //Mascara del canal.
	    Fl_PNG_Image *icanal;
		// Variable que representa el color de la gráfica de la señal adquirida por el canal.
		int ncolor;
		//Menu desplegable para seleccionar la escala de voltios por división del canal
        Fl_Choice *omenuvDiv;
		// Indicador luminoso del estado activo el acople gnd del canal
        Fl_Box *oacopGnd;
		// Indicador luminoso del estado activo el acople ac del canal
        Fl_Box *oacopAc;
		// Indicador luminoso del estado activo el acople dc del canal
        Fl_Box *oacopDc;
        // Perilla para ajustar la posición vertical de la señal.
        //Fl_Knob *oposx;
        Fl_Dial *oposx;
   private:
        // Calback para la escala de 5 voltios por división
		static void cbVdiv5(Fl_Widget*, void *);
		inline void cbVdiv5In(Fl_Widget*);
		// Calback para la escala de 2 voltios por división
		static void cbVdiv2(Fl_Widget*, void *);
		inline void cbVdiv2In(Fl_Widget*);
		//Calback para la escala de 1 voltio por división
		static void cbVdiv1(Fl_Widget*, void *);
		inline void cbVdiv1In(Fl_Widget*);
		//Calback para la escala de 0.5 voltios por división
		static void cbVdiv05(Fl_Widget*, void *);
		inline void cbVdiv05In(Fl_Widget*);
		//Calback para la escala de 0.2 voltios por división
		static void cbVdiv02(Fl_Widget*, void *);
		inline void cbVdiv02In(Fl_Widget*);
		//Calback para la escala de 0.1 voltios por división
		static void cbVdiv01(Fl_Widget*, void *);
		inline void cbVdiv01In(Fl_Widget*);
		// Calback para la escala de 50m voltios por división
		static void cbVdiv50m(Fl_Widget*, void *);
		inline void cbVdiv50mIn(Fl_Widget*);
		// Calback para la escala de 20m voltios por división
		static void cbVdiv20m(Fl_Widget*, void *);
		inline void cbVdiv20mIn(Fl_Widget*);
		//Calback para la escala de 10m voltios por división
		static void cbVdiv10m(Fl_Widget*, void *);
		inline void cbVdiv10mIn(Fl_Widget*);
		//Calback para la escala de 5m voltios por división
		static void cbVdiv5m(Fl_Widget*, void *);
		inline void cbVdiv5mIn(Fl_Widget*);
		// Calback para la escala de 2m voltios por división
		static void cbVdiv2m(Fl_Widget*, void *);
		inline void cbVdiv2mIn(Fl_Widget*);
		// Calback para la escala de 1m voltio por división
		static void cbVdiv1m(Fl_Widget*, void *);
		inline void cbVdiv1mIn(Fl_Widget*);

};

#endif // CANAL_H

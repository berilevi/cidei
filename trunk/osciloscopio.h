// Class automatically generated by Dev-C++ New Class wizard

#ifndef OSCILOSCOPIO_H
#define OSCILOSCOPIO_H
                  
#include "instrumento.h"                    // Cabecera de la superclase
#include "Fl_Scope.h"                       
#include "grid.h"
#include "canal.h"  
#include "DispOsc.h"                         
#include "fl_Knob.h"
#include <FL/Fl.H>
#include <FL/Fl_Help_Dialog.h>
#include <FL/Fl_Group.H>  
#include <FL/Fl_Menu_Item.H> 
#include <FL/Fl_Choice.H>     
#include <Fl/fl_Light_Button.h>
#include <FL/Fl_Repeat_Button.H>
#include <FL/Fl_Ask.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Check_Button.H>

#include <fstream>
#include <math.h>
#include <iostream>
#include <string.h>
#include <windows.h> 

using namespace std;

/*******************************************************************************
* Osciloscopio: Representa las funcionalidades del instrumento Osciloscopio de
*               dos canales.               
*******************************************************************************/

class Osciloscopio : public Instrumento{
      
	public:
		// Constructor de clase
		//Osciloscopio(int x, int y, int w, int h, const char *l, int ncol);
		Osciloscopio();
        // Destructor de clase
		~Osciloscopio();
        //Agrupa la pantalla, los 2 canales y los demas controles del osciloscopìo
        Fl_Group *ogroup_osc;
        //Agrupa los controles de tiempo por división en el osciloscopio.
        Fl_Group *ogroup_tdiv;
        //Agrupa los controles de seleccion de fuente y posición del trigger en el osciloscopio.
        Fl_Group *ogroup_trigger;
        //Agrupa el control de la posición horizontal de las gráficas.
        Fl_Group *ogroup_pos;
        //Agrupa las opciones de operaciones entre las gráficas cuando se encuantran activos los dos canales.
        Fl_Group *ogroup_dual;
        //Caja para colocar el nombre del instrumento en la interfaz. 
        Fl_Box *obox_nombre;
        //Instancia de Canal 1. 
        Canal *canal1; 
        //Instancia de Canal 2.
        Canal *canal2;	
        //Botón para prender/apagar el osciloscopio.
        Fl_Light_Button *ooscOn;
        //Botón para prender/apagar el canal 1.
		Fl_Light_Button *och1On;
        //Botón para prender/apagar el canal 2.
		Fl_Light_Button *och2On;
        //Botón de repetición para seleccionar el canal fuente del trigger.
        Fl_Repeat_Button *oselTrigger;
        //Botón de repetición para seleccionar la operación entre señales en modo dual.
        Fl_Repeat_Button *odualMenu; 
        //Botón para detener las gráficas que se presentan en la pantalla del osciloscopio.
        Fl_Light_Button *ostop;
        //Botón que habilita el ajuste automático del instrumento. 
        Fl_Button *oautoSet;
        //Botón que habilita el almacenamiento en archivos planos de texto.
        Fl_Button *ologOsc;
        //Botón que habilita la ayuda para el uso del instrumento. 
        Fl_Button *ohelpOsc;
        //Botón que habilita la ayuda flotante para el uso de los botones del instrumento.
        Fl_Check_Button *oayudaOsc;
        //Selector de la escala de tiempo por división.
        Fl_Knob *otiempoDiv;
        //Perilla para el desplazamiento horizontal de la señal graficada.
        Fl_Knob *oposy;
        //Perilla de selección del nivel de disparo del trigger.
        Fl_Knob *onivelTrigger;
        //Pantalla del osciloscopio
		Fl_Scope*  opantalla;
		//Cuadricula de de la pantalla del osciloscopio. 
		grid*  ogrilla;
		//Texto de información de la configuracion del canal 1. 
		DispOsc*  odispOsc1;
        //Texto de información de la configuracion del canal 2.
		DispOsc*  odispOsc2;
        //Variable que contiene el dato que se envía para graficar la señal del canal 1.
		int idatoGrafCh1;
        //Variable que contiene el dato que se envía para graficar la señal del canal 2.
		int idatoGrafCh2;
		//Variable que contiene el valor pico a pico de la señal del canal 1.
		int ivppCh1;
        //Variable que contiene el valor pico a pico de la señal del canal 2.
		int ivppCh2;
        //Callback del timer para realizar la solicitud de los vectores de datos.
        static void cbTimerVectores(void *);
        inline void cbTimerVectoresIn();
        //Callback del timer para realizar la solicitud de datos uno a uno.
        static void cbTimer(void *);
        inline void cbTimerIn();
        //Callback del botón de ayuda flotante de los botones del osciloscopio.  
        static void cbAyuda(Fl_Widget*, void *);
        inline void cbAyudaIn();     
    	
   private: 
        //Callback del botón que activa la ayuda del instrumento     
        static void cb_help(Fl_Widget*, void *);
        inline void cb_help_in();   
        //Callback del botón que activa el ajuste automático del instrumento    
        static void cb_auto(Fl_Widget*, void *);
        inline void cb_auto_in();
        //Callback del botón selector del acople del canal 1.
		static void cb_acople1(Fl_Widget*, void *);
		inline void cb_acople1_in();
        //Callback del botón selector de acople del canal 2.
		static void cb_acople2(Fl_Widget*, void *);
		inline void cb_acople2_in();
        //Callback del selector de la escala de volt/div del canal 1.
		static void cb_volt_div1(Fl_Widget*, void *);
		inline void cb_volt_div1_in(Fl_Widget*);  
        //Callback del selector de la escala de volt/div del canal 2.
		static void cb_volt_div2(Fl_Widget*, void *);
		inline void cb_volt_div2_in(Fl_Widget*); 
        //Rutina para solicitar las muestras de las señales por vectores o una a una. 
		void muestreo_timer(int);
        //Callback del menú de tiempo por división en la escala de 0.5s.
		static void cb_tdiv05s(Fl_Widget*, void *);
		inline void cb_tdiv05s_in(Fl_Widget*);
        //Callback del menú de tiempo por división en la escala de 0.2s.
		static void cb_tdiv02s(Fl_Widget*, void *);
		inline void cb_tdiv02s_in(Fl_Widget*);
        //Callback del menú de tiempo por división en la escala de 0.1s.
		static void cb_tdiv01s(Fl_Widget*, void *);
		inline void cb_tdiv01s_in(Fl_Widget*);
		//Callback del menú de tiempo por división en la escala de 50ms.
		static void cb_tdiv50ms(Fl_Widget*, void *);
		inline void cb_tdiv50ms_in(Fl_Widget*);
		//Callback del menú de tiempo por división en la escala de 20ms.
		static void cb_tdiv20ms(Fl_Widget*, void *);
		inline void cb_tdiv20ms_in(Fl_Widget*);
		//Callback del menú de tiempo por división en la escala de 10ms.
		static void cb_tdiv10ms(Fl_Widget*, void *);
		inline void cb_tdiv10ms_in(Fl_Widget*);
		//Callback del menú de tiempo por división en la escala de 5ms.
		static void cb_tdiv5ms(Fl_Widget*, void *);
		inline void cb_tdiv5ms_in(Fl_Widget*);
		//Callback del menú de tiempo por división en la escala de 2ms.
		static void cb_tdiv2ms(Fl_Widget*, void *);
		inline void cb_tdiv2ms_in(Fl_Widget*);
		//Callback del menú de tiempo por división en la escala de 1ms.
		static void cb_tdiv1ms(Fl_Widget*, void *);
		inline void cb_tdiv1ms_in(Fl_Widget*);
		//Callback del menú de tiempo por división en la escala de 0.5ms.
		static void cb_tdiv05ms(Fl_Widget*, void *);
		inline void cb_tdiv05ms_in(Fl_Widget*);
		//Callback del menú de tiempo por división en la escala de 0.2ms.
		static void cb_tdiv02ms(Fl_Widget*, void *);
		inline void cb_tdiv02ms_in(Fl_Widget*);
		//Callback del menú de tiempo por división en la escala de 0.1ms.
		static void cb_tdiv01ms(Fl_Widget*, void *);
		inline void cb_tdiv01ms_in(Fl_Widget*);
		//Callback del menú de tiempo por división en la escala de 50us.
		static void cb_tdiv50us(Fl_Widget*, void *);
		inline void cb_tdiv50us_in(Fl_Widget*);
		//Callback del menú de tiempo por división en la escala de 20us por división
		static void cb_tdiv20us(Fl_Widget*, void *);
		inline void cb_tdiv20us_in(Fl_Widget*);
		//Callback del menú de tiempo por división en la escala de 10us.
		static void cb_tdiv10us(Fl_Widget*, void *);
		inline void cb_tdiv10us_in(Fl_Widget*);
		//Callback del menú de tiempo por división en la escala de 5us.
		static void cb_tdiv5us(Fl_Widget*, void *);
		inline void cb_tdiv5us_in(Fl_Widget*);
		//Callback del menú de tiempo por división en la escala de 2us.
		static void cb_tdiv2us(Fl_Widget*, void *);
		inline void cb_tdiv2us_in(Fl_Widget*);
		//Callback del menú de tiempo por división en la escala de 1us.
		static void cb_tdiv1us(Fl_Widget*, void *);
		inline void cb_tdiv1us_in(Fl_Widget*);
        //Rutina que recorre el arreglo de los datos y envía punto por punto los datos para graficar.
		void recorrer_datos(int);
		//Rutina que calcula el valor pico a pico de las señales.
		void vpp(int, int, int);
		//Callback del botón para encender el canal 1. 
		static void cb_ch1_on(Fl_Widget*, void *);
		inline void cb_ch1_on_in();
		//Callback del botón para encender el canal 2.
		static void cb_ch2_on(Fl_Widget*, void *);
		inline void cb_ch2_on_in();
		//Callback del botón para activar o desactivar la grilla.
		static void cb_grilla(Fl_Widget*, void *);
		inline void cb_grilla_in();
		//Callback del botón para detener las gráficas.
		static void cb_stop(Fl_Widget*, void *);
		inline void cb_stop_in();
		//Callback del botón de las operaciones entre las gráficas.
		static void cb_dual_menu(Fl_Widget*, void *);
		inline void cb_dual_menu_in();
		//Callback del botón selector de la fuente del disparo (trigger).
		static void cb_sel_trigger(Fl_Widget*, void *);
		inline void cb_sel_trigger_in();
		//Callback del botón que prende/apaga el osciloscopio
		static void cb_osc_on(Fl_Widget*, void *);
		inline void cb_osc_on_in();
		//Callback del botón que activa el almacenamiento en archivos planos. 
		static void cb_log_osc(Fl_Widget*, void *);
		inline void cb_log_osc_in();
		//Callback del botón selector de la escala de tiempo por división. 
		static void cb_tiempo_div(Fl_Widget*, void *);
		inline void cb_tiempo_div_in(Fl_Widget*);
		//Callback del botón selector de la posición vertical
		static void cb_pos_y(Fl_Widget*, void *);
		inline void cb_pos_y_in(Fl_Widget*);
		//Variable que representa el color de fondo de la pantalla.
		int icolor;
        //Indicador del modo de suma de señales de los dos canales  
        Fl_Box *osuma;
        //Indicador del modo de resta de señales de los dos canales 
        Fl_Box *oresta;
        //Indicador del modo x vs y de las señales de los dos canales 
        Fl_Box *ox_y;
        //Menu desplegable para seleccionar la escala de tiempo por división 
        Fl_Choice *omenu_t_div;
        //Indicador de activación del canal 1 como fuente de trigger  
        Fl_Box *otrigger_ch1;
        //Indicador de activación del canal 2 como fuente de trigger 
        Fl_Box *otrigger_ch2;
        //Botón para activar o desactivar la grilla.
        Fl_Light_Button *ogrilla_on;
        //Variable que almacena el caracter de la escala de tiempo por division  
        char ct_div;
        //Ventana de ayuda de uso del instrumento.
        Fl_Help_Dialog *Manual_osc; 
};

#endif // OSCILOSCOPIO_H
